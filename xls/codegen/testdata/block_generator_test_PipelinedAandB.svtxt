module PipelinedAandB(
  input wire the_clock,
  input wire the_reset,
  input wire [31:0] a,
  input wire [31:0] b,
  output wire [31:0] sum
);
  // ===== Pipe stage 0:

  // Registers for pipe stage 0:
  logic [31:0] p0_a;
  logic [31:0] p0_b;
  always_ff @ (posedge the_clock) begin
    if (the_reset) begin
      p0_a <= 32'h0000_0000;
      p0_b <= 32'h0000_0000;
    end else begin
      p0_a <= a;
      p0_b <= b;
    end
  end

  // ===== Pipe stage 1:
  wire [31:0] p1_and_8_comb;
  assign p1_and_8_comb = p0_a & p0_b;

  // Registers for pipe stage 1:
  logic [31:0] p1_sum;
  always_ff @ (posedge the_clock) begin
    if (the_reset) begin
      p1_sum <= 32'h0000_0000;
    end else begin
      p1_sum <= p1_and_8_comb;
    end
  end
  assign sum = p1_sum;
endmodule
