module ii_greater_than_one(
  input wire clk,
  input wire rst,
  input wire [31:0] in,
  input wire in_vld,
  input wire in_out_rdy,
  input wire out_rdy,
  output wire in_rdy,
  output wire [31:0] in_out,
  output wire in_out_vld,
  output wire [31:0] out,
  output wire out_vld
);
  logic [31:0] __st;
  logic __st_full;
  logic p0_valid;
  logic __out_has_been_sent_reg;
  logic __in_out_has_been_sent_reg;
  logic [31:0] __in_reg;
  logic __in_valid_reg;
  logic [31:0] __out_reg;
  logic __out_valid_reg;
  logic [31:0] __in_out_reg;
  logic __in_out_valid_reg;
  wire __in_out_vld_buf;
  wire __in_out_not_has_been_sent;
  wire in_out_valid_inv;
  wire __in_out_valid_and_not_has_been_sent;
  wire in_out_valid_load_en;
  wire in_out_load_en;
  wire __in_out_has_sent_or_is_ready;
  wire p1_stage_done;
  wire p1_not_valid;
  wire p0_enable;
  wire __out_vld_buf;
  wire __out_not_has_been_sent;
  wire out_valid_inv;
  wire __out_valid_and_not_has_been_sent;
  wire out_valid_load_en;
  wire out_load_en;
  wire __out_has_sent_or_is_ready;
  wire in_valid_inv;
  wire p0_stage_done;
  wire in_valid_load_en;
  wire p0_data_enable;
  wire __out_valid_and_all_active_outputs_ready;
  wire __out_valid_and_ready_txfr;
  wire __in_out_valid_and_all_active_outputs_ready;
  wire __in_out_valid_and_ready_txfr;
  wire in_load_en;
  wire or_1056;
  wire __out_not_stage_load;
  wire __out_has_been_sent_reg_load_en;
  wire __in_out_not_stage_load;
  wire __in_out_has_been_sent_reg_load_en;
  assign __in_out_vld_buf = __in_valid_reg & p0_valid;
  assign __in_out_not_has_been_sent = ~__in_out_has_been_sent_reg;
  assign in_out_valid_inv = ~__in_out_valid_reg;
  assign __in_out_valid_and_not_has_been_sent = __in_out_vld_buf & __in_out_not_has_been_sent;
  assign in_out_valid_load_en = in_out_rdy | in_out_valid_inv;
  assign in_out_load_en = __in_out_valid_and_not_has_been_sent & in_out_valid_load_en;
  assign __in_out_has_sent_or_is_ready = in_out_load_en | __in_out_has_been_sent_reg;
  assign p1_stage_done = p0_valid & __in_valid_reg & __in_out_has_sent_or_is_ready;
  assign p1_not_valid = ~p0_valid;
  assign p0_enable = p1_stage_done | p1_not_valid;
  assign __out_vld_buf = __st_full & p0_enable;
  assign __out_not_has_been_sent = ~__out_has_been_sent_reg;
  assign out_valid_inv = ~__out_valid_reg;
  assign __out_valid_and_not_has_been_sent = __out_vld_buf & __out_not_has_been_sent;
  assign out_valid_load_en = out_rdy | out_valid_inv;
  assign out_load_en = __out_valid_and_not_has_been_sent & out_valid_load_en;
  assign __out_has_sent_or_is_ready = out_load_en | __out_has_been_sent_reg;
  assign in_valid_inv = ~__in_valid_reg;
  assign p0_stage_done = __st_full & __out_has_sent_or_is_ready;
  assign in_valid_load_en = p1_stage_done | in_valid_inv;
  assign p0_data_enable = p0_enable & p0_stage_done;
  assign __out_valid_and_all_active_outputs_ready = __out_vld_buf & out_load_en;
  assign __out_valid_and_ready_txfr = __out_valid_and_not_has_been_sent & out_load_en;
  assign __in_out_valid_and_all_active_outputs_ready = __in_out_vld_buf & in_out_load_en;
  assign __in_out_valid_and_ready_txfr = __in_out_valid_and_not_has_been_sent & in_out_load_en;
  assign in_load_en = in_vld & in_valid_load_en;
  assign or_1056 = p0_data_enable | p1_stage_done;
  assign __out_not_stage_load = ~__out_valid_and_all_active_outputs_ready;
  assign __out_has_been_sent_reg_load_en = __out_valid_and_ready_txfr | __out_valid_and_all_active_outputs_ready;
  assign __in_out_not_stage_load = ~__in_out_valid_and_all_active_outputs_ready;
  assign __in_out_has_been_sent_reg_load_en = __in_out_valid_and_ready_txfr | __in_out_valid_and_all_active_outputs_ready;
  always_ff @ (posedge clk) begin
    if (rst) begin
      __st <= 32'h0000_0000;
      __st_full <= 1'h1;
      p0_valid <= 1'h0;
      __out_has_been_sent_reg <= 1'h0;
      __in_out_has_been_sent_reg <= 1'h0;
      __in_reg <= 32'h0000_0000;
      __in_valid_reg <= 1'h0;
      __out_reg <= 32'h0000_0000;
      __out_valid_reg <= 1'h0;
      __in_out_reg <= 32'h0000_0000;
      __in_out_valid_reg <= 1'h0;
    end else begin
      __st <= p1_stage_done ? __in_reg : __st;
      __st_full <= or_1056 ? p1_stage_done : __st_full;
      p0_valid <= p0_enable ? p0_stage_done : p0_valid;
      __out_has_been_sent_reg <= __out_has_been_sent_reg_load_en ? __out_not_stage_load : __out_has_been_sent_reg;
      __in_out_has_been_sent_reg <= __in_out_has_been_sent_reg_load_en ? __in_out_not_stage_load : __in_out_has_been_sent_reg;
      __in_reg <= in_load_en ? in : __in_reg;
      __in_valid_reg <= in_valid_load_en ? in_vld : __in_valid_reg;
      __out_reg <= out_load_en ? __st : __out_reg;
      __out_valid_reg <= out_valid_load_en ? __out_valid_and_not_has_been_sent : __out_valid_reg;
      __in_out_reg <= in_out_load_en ? __in_reg : __in_out_reg;
      __in_out_valid_reg <= in_out_valid_load_en ? __in_out_valid_and_not_has_been_sent : __in_out_valid_reg;
    end
  end
  assign in_rdy = in_load_en;
  assign in_out = __in_out_reg;
  assign in_out_vld = __in_out_valid_reg;
  assign out = __out_reg;
  assign out_vld = __out_valid_reg;
endmodule
