module TrivialFsmWithOutputs(
  input wire clk
);
  // TrivialFsm FSM:
  localparam StateBits = 1;
  localparam
    StateFoo = 0,
    StateBar = 1;
  logic [StateBits - 1:0] state = StateFoo;
  logic [StateBits - 1:0] state_next = StateFoo;
  logic baz = 0;
  logic [6:0] qux;
  logic [6:0] qux_next;

  // FSM state transition logic.
  always_comb begin
    state_next = state;
    case (state)
      StateFoo: begin
        state_next = StateBar;
      end
      StateBar: begin
        state_next = StateFoo;
      end
    endcase
  end

  // FSM output logic.
  always_comb begin
    qux_next = qux;
    case (state)
      StateFoo: begin
        baz = 1;
      end
      StateBar: begin
        qux_next = qux + 1;
        baz = 0;
      end
    endcase
  end
  always @ (posedge clk) begin
    state <= state_next;
    qux <= qux_next;
  end
endmodule
