module MultidimensionalArray(
  input wire clk,
  input wire [47:0] a,
  input wire [15:0] index,
  output wire [23:0] out
);
  wire [7:0] a_unflattened[2][3];
  assign a_unflattened[0][0] = a[7:0];
  assign a_unflattened[0][1] = a[15:8];
  assign a_unflattened[0][2] = a[23:16];
  assign a_unflattened[1][0] = a[31:24];
  assign a_unflattened[1][1] = a[39:32];
  assign a_unflattened[1][2] = a[47:40];

  // ===== Pipe stage 0:

  // Registers for pipe stage 0:
  logic [7:0] p0_a[2][3];
  logic [15:0] p0_index;
  always_ff @ (posedge clk) begin
    p0_a <= a_unflattened;
    p0_index <= index;
  end

  // ===== Pipe stage 1:

  // Registers for pipe stage 1:
  logic [7:0] p1_a[2][3];
  logic [15:0] p1_index;
  always_ff @ (posedge clk) begin
    p1_a <= p0_a;
    p1_index <= p0_index;
  end

  // ===== Pipe stage 2:

  // Registers for pipe stage 2:
  logic [7:0] p2_a[2][3];
  logic [15:0] p2_index;
  always_ff @ (posedge clk) begin
    p2_a <= p1_a;
    p2_index <= p1_index;
  end

  // ===== Pipe stage 3:
  wire [7:0] p3_array_index_18_comb[3];
  assign p3_array_index_18_comb = p2_a[p2_index > 16'h0001 ? 1'h1 : p2_index[0:0]];

  // Registers for pipe stage 3:
  logic [7:0] p3_array_index_18[3];
  always_ff @ (posedge clk) begin
    p3_array_index_18 <= p3_array_index_18_comb;
  end
  assign out = {p3_array_index_18[2], p3_array_index_18[1], p3_array_index_18[0]};
endmodule
