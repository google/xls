module pipelined_proc(
  input wire clk,
  input wire rst,
  input wire [31:0] in_data,
  input wire in_valid,
  input wire out_ready,
  output wire in_ready,
  output wire out_valid
);
  logic [31:0] __in_data_reg;
  logic [31:0] __in_data_skid_reg;
  logic __in_data_valid_reg;
  logic __in_data_valid_skid_reg;
  wire in_data_valid_or;
  wire in_data_from_skid_rdy;
  wire p0_stage_done;
  wire in_data_data_valid_load_en;
  wire in_data_to_is_not_rdy;
  wire in_data_data_is_sent_to;
  wire in_data_skid_data_load_en;
  wire in_data_skid_valid_set_zero;
  wire in_data_data_valid_load_en__1;
  wire in_data_skid_valid_load_en;
  assign in_data_valid_or = __in_data_valid_reg | __in_data_valid_skid_reg;
  assign in_data_from_skid_rdy = ~__in_data_valid_skid_reg;
  assign p0_stage_done = in_data_valid_or & out_ready;
  assign in_data_data_valid_load_en = in_valid & in_data_from_skid_rdy;
  assign in_data_to_is_not_rdy = ~p0_stage_done;
  assign in_data_data_is_sent_to = __in_data_valid_reg & p0_stage_done & in_data_from_skid_rdy;
  assign in_data_skid_data_load_en = __in_data_valid_reg & in_data_data_valid_load_en & in_data_to_is_not_rdy;
  assign in_data_skid_valid_set_zero = __in_data_valid_skid_reg & p0_stage_done;
  assign in_data_data_valid_load_en__1 = in_data_data_is_sent_to | in_data_data_valid_load_en;
  assign in_data_skid_valid_load_en = in_data_skid_data_load_en | in_data_skid_valid_set_zero;
  always_ff @ (posedge clk) begin
    if (rst) begin
      __in_data_reg <= 32'h0000_0000;
      __in_data_skid_reg <= 32'h0000_0000;
      __in_data_valid_reg <= 1'h0;
      __in_data_valid_skid_reg <= 1'h0;
    end else begin
      __in_data_reg <= in_data_data_valid_load_en ? in_data : __in_data_reg;
      __in_data_skid_reg <= in_data_skid_data_load_en ? __in_data_reg : __in_data_skid_reg;
      __in_data_valid_reg <= in_data_data_valid_load_en__1 ? in_valid : __in_data_valid_reg;
      __in_data_valid_skid_reg <= in_data_skid_valid_load_en ? in_data_from_skid_rdy : __in_data_valid_skid_reg;
    end
  end
  assign in_ready = in_data_from_skid_rdy;
  assign out_valid = in_data_valid_or;
endmodule
