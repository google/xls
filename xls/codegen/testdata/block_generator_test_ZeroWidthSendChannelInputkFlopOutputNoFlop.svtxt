module pipelined_proc(
  input wire clk,
  input wire rst,
  input wire [31:0] in_data,
  input wire in_valid,
  input wire out_ready,
  output wire in_ready,
  output wire out_valid
);
  logic [31:0] __in_data_reg;
  logic __in_data_valid_reg;
  wire p0_stage_done;
  wire in_data_valid_inv;
  wire in_data_valid_load_en;
  wire in_data_load_en;
  assign p0_stage_done = __in_data_valid_reg & out_ready;
  assign in_data_valid_inv = ~__in_data_valid_reg;
  assign in_data_valid_load_en = p0_stage_done | in_data_valid_inv;
  assign in_data_load_en = in_valid & in_data_valid_load_en;
  always_ff @ (posedge clk) begin
    if (rst) begin
      __in_data_reg <= 32'h0000_0000;
      __in_data_valid_reg <= 1'h0;
    end else begin
      __in_data_reg <= in_data_load_en ? in_data : __in_data_reg;
      __in_data_valid_reg <= in_data_valid_load_en ? in_valid : __in_data_valid_reg;
    end
  end
  assign in_ready = in_data_load_en;
  assign out_valid = __in_data_valid_reg;
endmodule
