module ValidSignalWithoutResetAndWithoutOutputValid(
  input wire clk,
  input wire in_valid,
  input wire [1:0] s,
  input wire [7:0] x,
  input wire [7:0] y,
  input wire [7:0] z,
  input wire [7:0] a,
  output wire [7:0] out
);
  // ===== Pipe stage 0:

  // Registers for pipe stage 0:
  logic p0_valid;
  logic [1:0] p0_s;
  logic [7:0] p0_x;
  logic [7:0] p0_y;
  logic [7:0] p0_z;
  logic [7:0] p0_a;
  always_ff @ (posedge clk) begin
    p0_valid <= in_valid;
    p0_s <= in_valid ? s : p0_s;
    p0_x <= in_valid ? x : p0_x;
    p0_y <= in_valid ? y : p0_y;
    p0_z <= in_valid ? z : p0_z;
    p0_a <= in_valid ? a : p0_a;
  end

  // ===== Pipe stage 1:

  // Registers for pipe stage 1:
  logic p1_valid;
  logic [1:0] p1_s;
  logic [7:0] p1_x;
  logic [7:0] p1_y;
  logic [7:0] p1_z;
  logic [7:0] p1_a;
  always_ff @ (posedge clk) begin
    p1_valid <= p0_valid;
    p1_s <= p0_valid ? p0_s : p1_s;
    p1_x <= p0_valid ? p0_x : p1_x;
    p1_y <= p0_valid ? p0_y : p1_y;
    p1_z <= p0_valid ? p0_z : p1_z;
    p1_a <= p0_valid ? p0_a : p1_a;
  end

  // ===== Pipe stage 2:

  // Registers for pipe stage 2:
  logic p2_valid;
  logic [1:0] p2_s;
  logic [7:0] p2_x;
  logic [7:0] p2_y;
  logic [7:0] p2_z;
  logic [7:0] p2_a;
  always_ff @ (posedge clk) begin
    p2_valid <= p1_valid;
    p2_s <= p1_valid ? p1_s : p2_s;
    p2_x <= p1_valid ? p1_x : p2_x;
    p2_y <= p1_valid ? p1_y : p2_y;
    p2_z <= p1_valid ? p1_z : p2_z;
    p2_a <= p1_valid ? p1_a : p2_a;
  end

  // ===== Pipe stage 3:
  wire [7:0] p3_sel_42_comb;
  assign p3_sel_42_comb = p2_s == 2'h0 ? p2_x : (p2_s == 2'h1 ? p2_y : (p2_s == 2'h2 ? p2_z : p2_a));

  // Registers for pipe stage 3:
  logic p3_valid;
  logic [7:0] p3_sel_42;
  always_ff @ (posedge clk) begin
    p3_valid <= p2_valid;
    p3_sel_42 <= p2_valid ? p3_sel_42_comb : p3_sel_42;
  end
  assign out = p3_sel_42;
endmodule
