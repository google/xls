# proto-file: xls/netlist/netlist.proto
# proto-message: CellLibraryProto

entries {
  kind: OTHER
  name: "AND"
  input_names: "A"
  input_names: "B"
  output_pin_list {
    pins {
      name: "Z"
      function: "A&B"
    }
  }
}
entries {
  kind: OTHER
  name: "AOI21"
  input_names: "A"
  input_names: "B"
  input_names: "C"
  output_pin_list {
    pins {
      name: "ZN"
      function: "!((A*B)|C)"
    }
  }
}
entries {
  kind: FLOP
  name: "DFF"
  input_names: "D"
  output_pin_list {
    pins {
      name: "Q"
      function: "D"
    }
  }
}
entries {
  kind: INVERTER
  name: "INV"
  input_names: "A"
  output_pin_list {
    pins {
      name: "ZN"
      function: "!A"
    }
  }
}
entries {
  kind: OTHER
  name: "LOGIC_ONE"
  output_pin_list {
    pins {
      name: "O"
      function: "1"
    }
  }
}
entries {
  kind: NAND
  name: "NAND"
  input_names: "A"
  input_names: "B"
  output_pin_list {
    pins {
      name: "ZN"
      function: "!(A&B)"
    }
  }
}
entries {
  kind: NOR
  name: "NOR4"
  input_names: "A"
  input_names: "B"
  input_names: "C"
  input_names: "D"
  output_pin_list {
    pins {
      name: "ZN"
      function: "!(A|B|C|D)"
    }
  }
}
entries {
  kind: OTHER
  name: "OR"
  input_names: "A"
  input_names: "B"
  output_pin_list {
    pins {
      name: "Z"
      function: "A|B"
    }
  }
}
entries {
  kind: XOR
  name: "XOR"
  input_names: "A"
  input_names: "B"
  output_pin_list {
    pins {
      name: "Z"
      function: "A^B"
    }
  }
}
# A state-table-driven entry that simply computes AND.
# This format is...not concise.
entries {
  kind: OTHER
  name: "STATETABLE_AND"
  input_names: "A"
  input_names: "B"
  state_table {
    input_names: "A"
    input_names: "B"
    internal_names: "Z"
    rows {
      input_signals {
        key: "A"
        value: STATE_TABLE_SIGNAL_HIGH
      }
      input_signals {
        key: "B"
        value: STATE_TABLE_SIGNAL_HIGH
      }
      output_signals {
        key: "Z"
        value: STATE_TABLE_SIGNAL_HIGH
      }
    }
    rows {
      input_signals {
        key: "A"
        value: STATE_TABLE_SIGNAL_LOW
      }
      input_signals {
        key: "B"
        value: STATE_TABLE_SIGNAL_DONTCARE
      }
      output_signals {
        key: "Z"
        value: STATE_TABLE_SIGNAL_LOW
      }
    }
    rows {
      input_signals {
        key: "A"
        value: STATE_TABLE_SIGNAL_DONTCARE
      }
      input_signals {
        key: "B"
        value: STATE_TABLE_SIGNAL_LOW
      }
      output_signals {
        key: "Z"
        value: STATE_TABLE_SIGNAL_LOW
      }
    }
  }
}
