// Copyright 2025 The XLS Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xls;

// This proto is used as a template such that its fields will be randomly
// populated with values. It contains a list of FuzzOpProtos, where each gets
// instantiated into a corresponding IR op.
message FuzzProgramProto {
  // Specifies how the stack of IR ops will be combined based on the
  // CombineStackMethod enum.
  optional CombineStackMethod combine_stack_method = 1;
  repeated FuzzOpProto fuzz_ops = 2;
}

// Each FuzzOpProto represents an XLS operation. A FuzzOpProto is used as a
// randomly generated instruction to instantiate an IR operation node.
message FuzzOpProto {
  oneof fuzz_op {
    FuzzAddProto add = 1;
    FuzzLiteralProto literal = 2;
    FuzzParamProto param = 3;
  }
}

message FuzzAddProto {
  optional int64 bit_width = 1;
  optional FittedOperandIdxProto lhs_idx = 2;
  optional FittedOperandIdxProto rhs_idx = 3;
}

// TODO: Use the ValueProto::Bits proto for bit_width and value_bytes.
message FuzzLiteralProto {
  optional int64 bit_width = 1;
  optional bytes value_bytes = 2;
}

// TODO: Consider using the TypeProto to define the type of param generated.
message FuzzParamProto {
  optional int64 bit_width = 1;
}

// References a node on the stack by its index.
message FittedOperandIdxProto {
  optional int64 stack_idx = 1;
  optional WidthFittingMethodProto width_fitting_method = 2;
}

message WidthFittingMethodProto {
  // Methods used to decrease or increase the bit width of the operand.
  optional DecreaseWidthMethod decrease_width_method = 1;
  optional IncreaseWidthMethod increase_width_method = 2;
}

// Specifies the method used to combine the IrFuzzBuilder stack of BValues into
// a single IR object.
enum CombineStackMethod {
  // Protobuf enums require a default/unset value as a convention. Some
  // languages prefer to distinguish a default value from a enum that is not
  // set.
  UNSET_COMBINE_STACK_METHOD = 0;
  LAST_ELEMENT_METHOD = 1;
  ADD_STACK_METHOD = 2;
}

// Specifies the method used to decrease the bit width of an IR op.
enum DecreaseWidthMethod {
  UNSET_DECREASE_WIDTH_METHOD = 0;
  BIT_SLICE_METHOD = 1;
}

// Specifies the method used to increase the bit width of an IR op.
enum IncreaseWidthMethod {
  UNSET_INCREASE_WIDTH_METHOD = 0;
  ZERO_EXTEND_METHOD = 1;
  SIGN_EXTEND_METHOD = 2;
}
