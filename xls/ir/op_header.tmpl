#ifndef XLS_IR_OP_
#define XLS_IR_OP_

#include <string>
#include <vector>

#include "xls/common/integral_types.h"
#include "absl/strings/string_view.h"
#include "absl/types/span.h"
#include "xls/common/status/statusor.h"

namespace xls {

// Enumerates the operator for nodes in the IR.
enum class Op {
  {% for op in spec.OPS -%}
  {{ op.enum_name }},
  {% endfor -%}
};

inline std::vector<Op> AllOps() {
  return {
  {% for op in spec.OPS -%}
  Op::{{ op.enum_name }},
  {% endfor -%}
  };
}

const int64 kOpLimit = static_cast<int64>(Op::{{ spec.OPS[-1].enum_name }})+1;

// Converts the "op" enumeration to a human readable string.
std::string OpToString(Op op);

// Converts a human readable op string into the "op" enumeration.
xabsl::StatusOr<Op> StringToOp(absl::string_view op_str);

// Returns whether the operation is a compare operation.
bool OpIsCompare(Op op);

// Returns whether the operation is associative, eg., kAdd, or kOr.
bool OpIsAssociative(Op op);

// Returns whether the operation is commutative, eg., kAdd, or kEq.
bool OpIsCommutative(Op op);

// Returns whether the operation is a bitwise logical op, eg., kAnd or kOr.
bool OpIsBitWise(Op op);

// Returns the delay of this operation in picoseconds.
// TODO(meheff): This value should be plugable and be derived from other aspects
// of Node, not just the op.
int64 OpDelayInPs(Op op);

// Forward declare all Op classes (subclasses of Node).
{% for op_class in spec.OpClass.kinds.values() -%}
class {{ op_class.name }};
{% endfor %}

// Returns whether the given Op has the OpT node subclass.
template<typename OpT>
bool IsOpClass(Op op) {
  static_assert(!std::is_same<OpT, OpT>::value, "OpT is not a Node subclass");
  return false;
}

{% for op_class in spec.OpClass.kinds.values() -%}
template<>
bool IsOpClass<{{op_class.name}}>(Op op);
{% endfor %}

// Streams the string for "op" to the given output stream.
std::ostream& operator<<(std::ostream& os, Op op);

}  // namespace xls

#endif  // XLS_IR_OP_
