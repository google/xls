// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef XLS_IR_FUNCTION_H_
#define XLS_IR_FUNCTION_H_

#include <memory>
#include <string>
#include <vector>

#include "absl/container/flat_hash_map.h"
#include "absl/status/status.h"
#include "xls/common/iterator_range.h"
#include "xls/common/status/statusor.h"
#include "xls/ir/dfs_visitor.h"
#include "xls/ir/node.h"
#include "xls/ir/nodes.h"
#include "xls/ir/package.h"
#include "xls/ir/type.h"
#include "xls/ir/unwrapping_iterator.h"
#include "xls/ir/verifier.h"

namespace xls {

// Holds a set of nodes that represent an IR function:
//
// * Functions are composed out of nodes (that represent expressions).
// * Functions are owned by packages that contain them.
class Function {
 private:
  using NodeList = std::list<std::unique_ptr<Node>>;

 public:
  explicit Function(absl::string_view name, Package* package)
      : name_(name),
        qualified_name_(absl::StrCat(package->name(), "::", name_)),
        package_(package) {}

  Package* package() const { return package_; }
  const std::string& name() const { return name_; }
  const std::string qualified_name() const { return qualified_name_; }

  // DumpIr emits the IR in a parsable, hierarchical text format.
  // Parameter:
  //   'recursive' if true, will dump counted-for body functions as well.
  //   This is only useful when dumping individual functions, and not packages.
  std::string DumpIr(bool recursive = false) const;

  // Returns the node that serves as the return value of this function.
  Node* return_value() const { return return_value_; }
  void set_return_value(Node* n) { return_value_ = n; }

  FunctionType* GetType();

  // Return Span of parameters.
  absl::Span<Param* const> params() const { return params_; }

  // Return the parameter at the given index.
  Param* param(int64 index) const { return params_.at(index); }

  // Return the parameter with the given name.
  xabsl::StatusOr<Param*> GetParamByName(absl::string_view param_name) const;

  xabsl::StatusOr<int64> GetParamIndex(Param* param) const;

  int64 node_count() const { return nodes_.size(); }

  // Expose Nodes, so that transformation passes can operate
  // on this function.
  xabsl::iterator_range<UnwrappingIterator<NodeList::iterator>> nodes() {
    return xabsl::make_range(MakeUnwrappingIterator(nodes_.begin()),
                             MakeUnwrappingIterator(nodes_.end()));
  }

  // Adds a node to the set owned by this function.
  template <typename T>
  T* AddNode(std::unique_ptr<T> n) {
    if (n->template Is<Param>()) {
      params_.push_back(n->template As<Param>());
    }
    T* ptr = n.get();
    node_iterators_[ptr] = nodes_.insert(nodes_.end(), std::move(n));
    return ptr;
  }

  // Creates a new node and adds it to the function. NodeT is the node subclass
  // (e.g., 'Param') and the variadic args are the constructor arguments with
  // the exception of the final Function* argument. This method verifies the
  // newly constructed node after it is added to the function. Returns a pointer
  // to the newly constructed node.
  template <typename NodeT, typename... Args>
  xabsl::StatusOr<NodeT*> MakeNode(Args&&... args) {
    NodeT* new_node =
        AddNode(absl::make_unique<NodeT>(std::forward<Args>(args)..., this));
    XLS_RETURN_IF_ERROR(Verify(new_node));
    return new_node;
  }

  // Find a node by it's name, as generated by DumpIr.
  xabsl::StatusOr<Node*> GetNode(absl::string_view standard_node_name);

  // Removes the node from the function. The node must have no users.
  //
  // If remove_param_ok is false and a parameter is given for removal, this
  // method will return an error -- this is a sanity check against removing
  // parameters and changing the type signature when that is not intended.
  //
  // Warning: if you remove a parameter node via this method (with
  // remove_param_ok), you will change the function type signature.
  absl::Status RemoveNode(Node* n, bool remove_param_ok = false);

  // Visit all nodes (including nodes not reachable from the root) in the
  // function using the given visitor.
  absl::Status Accept(DfsVisitor* visitor);

  // Creates a clone of the function with the new name 'new_name'. Function is
  // owned by the same package.
  xabsl::StatusOr<Function*> Clone(absl::string_view new_name) const;

  // Returns true if analysis indicates that this function always produces the
  // same value as 'other' when run with the same arguments. The analysis is
  // conservative and false may be returned for some "equivalent" functions.
  bool IsDefinitelyEqualTo(const Function* other) const;

 private:
  Function(const Function& other) = delete;
  void operator=(const Function& other) = delete;

  std::string name_;
  std::string qualified_name_;
  Package* package_;

  // Store Nodes in std::list as they can be added and removed arbitrarily and
  // we want a stable iteration order. Keep a map from instruction pointer to
  // location in the list for fast lookup.
  NodeList nodes_;
  absl::flat_hash_map<const Node*, NodeList::iterator> node_iterators_;

  std::vector<Param*> params_;
  Node* return_value_ = nullptr;
};

std::ostream& operator<<(std::ostream& os, const Function& function);

}  // namespace xls

#endif  // XLS_IR_FUNCTION_H_
