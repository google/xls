#include "xls/ir/nodes.h"

#include "xls/common/logging/logging.h"
#include "xls/common/status/ret_check.h"
#include "absl/status/statusor.h"
#include "xls/ir/block.h"
#include "xls/ir/channel.h"
#include "xls/ir/function_base.h"
#include "xls/ir/function.h"
#include "xls/ir/package.h"

namespace xls {

namespace {

Type* GetTupleType(Package* package, absl::Span<Node* const> operands) {
  std::vector<Type*> operand_types;
  for (Node* operand : operands) {
    operand_types.push_back(operand->GetType());
  }
  return package->GetTupleType(operand_types);
}

Type* GetConcatType(Package* package, absl::Span<Node* const> operands) {
  int64_t width = 0;
  for (Node* operand : operands) {
    width += operand->BitCountOrDie();
  }
  return package->GetBitsType(width);
}

Type* GetArrayConcatType(Package* package, absl::Span<Node* const> operands) {
  int64_t size = 0;
  Type* element_type = nullptr;

  for (Node* operand : operands) {
    auto operand_type = operand->GetType()->AsArrayOrDie();

    size += operand_type->size();
    if (element_type == nullptr) {
      // Set element_type to the first operand's element type
      element_type = operand_type->element_type();
    }
  }

  XLS_CHECK(element_type);
  return package->GetArrayType(size, element_type);
}

Type* GetMapType(Node* operand, Function* to_apply) {
  return operand->package()->GetArrayType(operand->GetType()->AsArrayOrDie()->size(),
                                 to_apply->return_value()->GetType());
}

}  // namespace

{% for op_class in spec.OpClass.kinds.values() -%}
{{ op_class.name }}::{{ op_class.name }} ({{ op_class.constructor_args_str() }}) :
  {{ op_class.base_constructor_invocation() }}
{%- for member in op_class.data_members() -%}
   , {{ member.name }}({{ member.init }})
{%- endfor -%}
{
{% for op in op_class.operands %}
   {{ op.add_method }}({{ op.name }});
{%- endfor %}
}

{% if not op_class.custom_clone_method %}
absl::StatusOr<Node*> {{ op_class.name }}::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  XLS_RET_CHECK_EQ(operand_count(), new_operands.size());
  return new_function->MakeNodeWithName<{{ op_class.name }}>(
      {{ op_class.clone_args_str("new_operands") }});
}
{% endif %}

{% if op_class.data_members() %}
bool {{ op_class.name }}::IsDefinitelyEqualTo(const Node* other) const {
  if (this == other) {
    return true;
  }
  if (!Node::IsDefinitelyEqualTo(other)) {
    return false;
  }

  return {{ op_class.equal_to_expr() }};
}
{% endif %}


{% endfor %}

SliceData Concat::GetOperandSliceData(int64_t operandno) const {
  XLS_CHECK_GE(operandno, 0);
  int64_t start = 0;
  for (int64_t i = operands().size()-1; i > operandno; --i) {
    Node* operand = this->operand(i);
    start += operand->BitCountOrDie();
  }
  return SliceData{start, this->operand(operandno)->BitCountOrDie()};
}

absl::StatusOr<Node*> Param::CloneInNewFunction(absl::Span<Node* const> new_operands,
                                           FunctionBase* new_function) const {
  // TODO(meheff): Choose an appropriate name for the cloned node.
  XLS_RET_CHECK_EQ(operand_count(), new_operands.size());
  XLS_ASSIGN_OR_RETURN(Type* new_type, 
    new_function->package()->MapTypeFromOtherPackage(GetType()));
  return new_function->MakeNodeWithName<Param>(loc(),
                                      name_,
                                      new_type);
}

absl::StatusOr<Node*> Array::CloneInNewFunction(absl::Span<Node* const> new_operands,
                                           FunctionBase* new_function) const {
  // TODO(meheff): Choose an appropriate name for the cloned node.
  XLS_RET_CHECK_EQ(size(), new_operands.size());
  XLS_ASSIGN_OR_RETURN(Type* new_element_type, 
    new_function->package()->MapTypeFromOtherPackage(element_type()));
  return new_function->MakeNodeWithName<Array>(loc(),
                                      new_operands,
                                      new_element_type,
                                      name_);
}

absl::StatusOr<Node*> CountedFor::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  XLS_RET_CHECK_EQ(operand_count(), new_operands.size());
  // TODO(meheff): Choose an appropriate name for the cloned node.
  return new_function->MakeNodeWithName<CountedFor>(loc(), new_operands[0],
                                            new_operands.subspan(1),
                                            trip_count(),
                                            stride(),
                                            body(),
                                            name_);
}

absl::StatusOr<Node*> DynamicCountedFor::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  XLS_RET_CHECK_EQ(operand_count(), new_operands.size());
  // TODO(meheff): Choose an appropriate name for the cloned node.
  return new_function->MakeNodeWithName<DynamicCountedFor>(loc(), new_operands[0],
                                            new_operands[1],
                                            new_operands[2],
                                            new_operands.subspan(3),
                                            body(),
                                            name_);
}

absl::StatusOr<Node*> Select::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  XLS_RET_CHECK_EQ(operand_count(), new_operands.size());
  absl::optional<Node*> new_default_value =
    default_value().has_value()
    ? absl::optional<Node*>(new_operands.back())
    : absl::nullopt;
  // TODO(meheff): Choose an appropriate name for the cloned node.
  return new_function->MakeNodeWithName<Select>(loc(), new_operands[0],
                                        new_operands.subspan(1, cases_size_),
                                        new_default_value,
                                        name_);
}

absl::StatusOr<Node*> OneHotSelect::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  // TODO(meheff): Choose an appropriate name for the cloned node.
  return new_function->MakeNodeWithName<OneHotSelect>(loc(), new_operands[0],
                                              new_operands.subspan(1),
                                              name_);
}

absl::StatusOr<Node*> ArrayIndex::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  // TODO(meheff): Choose an appropriate name for the cloned node.
  return new_function->MakeNodeWithName<ArrayIndex>(loc(),
                                      new_operands[0],
                                      new_operands.subspan(1),
                                      name_);
}

absl::StatusOr<Node*> ArrayUpdate::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  // TODO(meheff): Choose an appropriate name for the cloned node.
  return new_function->MakeNodeWithName<ArrayUpdate>(loc(),
                                      new_operands[0],
                                      new_operands[1],
                                      new_operands.subspan(2),
                                      name_);
}

absl::StatusOr<Node*> Assert::CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const {
  return new_function->MakeNodeWithName<Assert>(loc(),
                                    new_operands[0],
                                    new_operands[1],
                                    new_operands.subspan(2),
                                    message(),
                                    label(),
                                    name_);
}

bool Select::AllCases(std::function<bool(Node*)> p) const {
  for (Node* case_ : cases()) {
    if (!p(case_)) {
      return false;
    }
  }
  if (default_value().has_value()) {
    if (!p(default_value().value())) {
      return false;
    }
  }
  return true;
}

}  // namespace xls
