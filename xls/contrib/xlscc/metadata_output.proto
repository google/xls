// Copyright 2021 The XLS Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xlscc_metadata;

message SourceName {
  optional int32 number = 1;
  optional string path = 2;
}

// Top level message outputted from XLS[cc]
message MetadataOutput {
  // All struct types encountered in compilation
  repeated Type structs = 1;
  // Top function's prototype, for example, the function
  // #pragma hls_top was specified for
  optional FunctionPrototype top_func_proto = 2;

  repeated FunctionPrototype all_func_protos = 3;

  repeated SourceName sources = 4;
}

// Represents a parameter to a function
message FunctionParameter {
  optional string name = 1;
  optional Type type = 2;
  optional bool is_reference = 3;
  optional bool is_const = 4;
}

message SourceLocation {
  optional string filename = 1;
  optional int32 line = 2;
  optional int32 column = 3;
}

message SourceLocationRange {
  optional SourceLocation begin = 1;
  optional SourceLocation end = 2;
}

// Represents a static value in a function
message FunctionValue {
  optional CPPName name = 1;
  optional Type type = 2;
  optional Value value = 3;
  optional SourceLocationRange declaration_location = 4;
}

// Represents the prototype / interface of a function
message FunctionPrototype {
  optional CPPName name = 1;
  optional Type return_type = 2;
  repeated FunctionParameter params = 3;
  optional SourceLocationRange whole_declaration_location = 4;
  optional SourceLocationRange return_location = 5;
  optional SourceLocationRange parameters_location = 6;
  repeated FunctionValue static_values = 7;
  // If this is specified, then it's a method, and:
  // - has an implicit this parameter
  // - if not const, has an implicit this return
  optional Type this_type = 8;
  optional bool is_const = 9;
  // Can be a method without a this_type if it's static
  optional bool is_method = 10;
  optional bool returns_reference = 11;
}

// The name of a C++ symbol / object.
// "id" should be used to correlate these, for example to look up
//  a struct type function parameter.
message CPPName {
  optional string name = 1;
  // Full C++ name, like "Foo::Bar"
  optional string fully_qualified_name = 2;
  // Unique ID
  optional uint64 id = 3;
  // Name as it is in the XLS IR.
  // Typically only applies to functions.
  optional string xls_name = 4;
}

// Placeholder for void
message VoidType {}

// __xls_bits built-in type
message BitsType {
  optional int32 width = 1;
}

// Any integral type: char, short, int, long
message IntType {
  optional int32 width = 1;
  optional bool is_signed = 2;
  // C++ chars are neither signed nor unsigned.  Add an optional metadata field
  // and set it to true when a char declaration is encountered. Set it to false
  // for explicitly-signed- or explicitly-unsigned-char decalarations.  Do not
  // set it altogether for integer-type declarations of bit widths other than 8.
  optional bool is_declared_as_char = 3;
  // Is this defined by a class with #pragma hls_synthetic_int?
  // If so, values will use as_bits rather than as_int.
  optional bool is_synthetic = 4;
}

// If multiple enum variants map to the same value, each will be repeated here
// in the name field.
message EnumVariant {
  repeated string name = 1;
  optional int64 value = 2;
}

// C++ enum or enum class
message EnumType {
  optional string name = 1;
  optional int32 width = 2;
  optional bool is_signed = 3;
  repeated EnumVariant variants = 4;
}

// Placeholder for bool
message BoolType {}

// Represents an instantiation of a non-built-in type. Most commonly,
//  this is an instance of a struct.
message InstanceType {
  optional CPPName name = 1;
  repeated TemplateArgument args = 2;
}
message TemplateArgument {
  optional int32 as_integral = 1;
  optional Type as_type = 2;
}

// Fixed-length array type
message ArrayType {
  optional Type element_type = 1;
  optional int32 size = 2;
}

// Channel type
message ChannelType {
  optional Type item_type = 1;
}

// Generic type
message Type {
  optional VoidType as_void = 1;
  optional BitsType as_bits = 2;
  optional IntType as_int = 3;
  optional BoolType as_bool = 4;
  optional InstanceType as_inst = 5;
  optional ArrayType as_array = 6;
  optional StructType as_struct = 7;
  optional SourceLocationRange declaration_location = 8;
  optional InternalTupleType as_tuple = 9;
  optional ChannelType as_channel = 10;
  optional EnumType as_enum = 11;
}

// A field in a structure
message StructField {
  optional string name = 1;
  optional Type type = 2;
}

message StructType {
  // name() Type is always an InstanceType, that is, it has as_inst() valid
  optional Type name = 1;
  repeated StructField fields = 2;
  // Whether or not #pragma hls_no_tuple was specified
  // in the struct declaration
  optional bool no_tuple = 3;
}

message InternalTupleType {
  optional Type name = 1;
  repeated Type fields = 2;
}

// Generic type's associated values
message Value {
  optional bytes as_bits = 1;
  optional IntTypeValue as_int = 2;
  optional bool as_bool = 3;
  optional ArrayTypeValue as_array = 4;
  optional StructTypeValue as_struct = 5;
  optional InstanceTypeValue as_inst = 6;
  optional InternalTupleValue as_tuple = 7;
  optional EnumTypeValue as_enum = 8;
}

// Any integral type: char, short, int, long with the given
// signed or unsigned value
message IntTypeValue {
  optional int64 signed_value = 1;
  optional uint64 unsigned_value = 2;
}

// C++ enum or enum class value
message EnumTypeValue {
  optional EnumVariant variant = 1;
}

//
message StructTypeValue {
  // name() Type is always an InstanceType, that is, it has as_inst() valid
  optional Type name = 1;
  repeated StructFieldValue fields = 2;
  // Whether or not #pragma hls_no_tuple was specified in the struct declaration
  optional bool no_tuple = 3;
}

// A field in a structure with the given value
message StructFieldValue {
  optional CPPName name = 1;
  optional Type type = 2;
  optional Value value = 3;
}

message InternalTupleValue {
  repeated InternalTupleFieldValue fields = 1;
}

message InternalTupleFieldValue {
  optional Type type = 1;
  optional Value value = 2;
}

// Fixed-length array type with the given values
message ArrayTypeValue {
  repeated Value element_values = 1;
}

// Represents an instantiation of a non-built-in type. Most commonly,
//  this is an instance of a struct.
message InstanceTypeValue {
  optional uint64 value = 1;
}
