// AUTOMATICALLY GENERATED FILE FROM `xls/dslx/cpp_transpiler`. DO NOT EDIT!
#include <array>
#include <string>
#include <string_view>
#include <vector>

#include "fake_path.h"
#include "absl/base/macros.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_format.h"
#include "absl/types/span.h"
#include "xls/public/status_macros.h"
#include "xls/public/value.h"

[[maybe_unused]] static bool FitsInNBitsSigned(int64_t value, int64_t n) {
  // All bits from [n - 1, 64) must be all zero or all ones.
  if (n >= 64) {
    return true;
  }
  // `mask` is 1111...00000 with n zeros.
  uint64_t mask = ~((uint64_t{1} << n) - 1);
  uint64_t value_as_unsigned = static_cast<uint64_t>(value);
  return (mask & value_as_unsigned) == 0 ||
       (mask & value_as_unsigned) == mask;
}

[[maybe_unused]] static bool FitsInNBitsUnsigned(uint64_t value, int64_t n) {
  if (n >= 64) {
    return true;
  }
  return value < (uint64_t{1} << n);
}

[[maybe_unused]] static std::string __indent(int64_t amount) {
  return std::string(amount * 2, ' ');
}

namespace my_module {

absl::StatusOr<MyStruct> MyStruct::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 5) {
    return absl::InvalidArgumentError("Value is not a tuple of 5 elements.");
  }
  MyStruct result;
  if (!value.element(0).IsBits() || value.element(0).bits().bit_count() != 32) {
    return absl::InvalidArgumentError("Value is not a bits type of 32 bits.");
  }
  result.x = value.element(0).bits().ToUint64().value();
  if (!value.element(1).IsBits() || value.element(1).bits().bit_count() != 15) {
    return absl::InvalidArgumentError("Value is not a bits type of 15 bits.");
  }
  result.y = value.element(1).bits().ToUint64().value();
  if (!value.element(2).IsBits() || value.element(2).bits().bit_count() != 8) {
    return absl::InvalidArgumentError("Value is not a bits type of 8 bits.");
  }
  result.z = value.element(2).bits().ToUint64().value();
  if (!value.element(3).IsBits() || value.element(3).bits().bit_count() != 63) {
    return absl::InvalidArgumentError("Value is not a bits type of 63 bits.");
  }
  result.w = value.element(3).bits().ToInt64().value();
  if (!value.element(4).IsBits() || value.element(4).bits().bit_count() != 1) {
    return absl::InvalidArgumentError("Value is not a bits type of 1 bits.");
  }
  result.v = value.element(4).bits().ToUint64().value();
  return result;
}

absl::StatusOr<::xls::Value> MyStruct::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(5);
  if (!FitsInNBitsUnsigned(x, 32)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 32 bits", x));
  }
  members[0] = ::xls::Value(::xls::UBits(x, 32));
  if (!FitsInNBitsUnsigned(y, 15)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 15 bits", y));
  }
  members[1] = ::xls::Value(::xls::UBits(y, 15));
  if (!FitsInNBitsUnsigned(z, 8)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 8 bits", z));
  }
  members[2] = ::xls::Value(::xls::UBits(z, 8));
  if (!FitsInNBitsSigned(w, 63)) {
    return absl::InvalidArgumentError(absl::StrFormat("Signed value %#x does not fit in 63 bits", w));
  }
  members[3] = ::xls::Value(::xls::SBits(w, 63));
  if (!FitsInNBitsUnsigned(v, 1)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 1 bits", v));
  }
  members[4] = ::xls::Value(::xls::UBits(v, 1));
  return ::xls::Value::Tuple(members);
}

std::string MyStruct::ToString(int indent) const {
  std::string result = "MyStruct {\n";
  result += __indent(indent + 1) + "x: ";
  result += "bits[32]:" + absl::StrFormat("0x%x", x);
  result += ",\n";
  result += __indent(indent + 1) + "y: ";
  result += "bits[15]:" + absl::StrFormat("0x%x", y);
  result += ",\n";
  result += __indent(indent + 1) + "z: ";
  result += "bits[8]:" + absl::StrFormat("0x%x", z);
  result += ",\n";
  result += __indent(indent + 1) + "w: ";
  result += "bits[63]:" + absl::StrFormat("0x%x", w);
  result += ",\n";
  result += __indent(indent + 1) + "v: ";
  result += "bits[1]:" + absl::StrFormat("0x%x", v);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string MyStruct::ToDslxString(int indent) const {
  std::string result = "MyStruct {\n";
  result += __indent(indent + 1) + "x: ";
  result += "u32:" + absl::StrFormat("0x%x", x);
  result += ",\n";
  result += __indent(indent + 1) + "y: ";
  result += "u15:" + absl::StrFormat("0x%x", y);
  result += ",\n";
  result += __indent(indent + 1) + "z: ";
  result += "u8:" + absl::StrFormat("0x%x", z);
  result += ",\n";
  result += __indent(indent + 1) + "w: ";
  result += "s63:" + absl::StrFormat("%d", w);
  result += ",\n";
  result += __indent(indent + 1) + "v: ";
  result += "u1:" + absl::StrFormat("0x%x", v);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status MyStruct::Verify() const {
  if (!FitsInNBitsUnsigned(x, 32)) {
    return absl::InvalidArgumentError(absl::StrCat("MyStruct.x value does not fit in 32 bits: ", absl::StrFormat("0x%x", x)));
  }
  if (!FitsInNBitsUnsigned(y, 15)) {
    return absl::InvalidArgumentError(absl::StrCat("MyStruct.y value does not fit in 15 bits: ", absl::StrFormat("0x%x", y)));
  }
  if (!FitsInNBitsUnsigned(z, 8)) {
    return absl::InvalidArgumentError(absl::StrCat("MyStruct.z value does not fit in 8 bits: ", absl::StrFormat("0x%x", z)));
  }
  if (!FitsInNBitsSigned(w, 63)) {
    return absl::InvalidArgumentError(absl::StrCat("MyStruct.w value does not fit in signed 63 bits: ", absl::StrFormat("0x%x", w)));
  }
  if (!FitsInNBitsUnsigned(v, 1)) {
    return absl::InvalidArgumentError(absl::StrCat("MyStruct.v value does not fit in 1 bits: ", absl::StrFormat("0x%x", v)));
  }
  return absl::OkStatus();
}

bool MyStruct::operator==(const MyStruct& other) const {
    return x == other.x && y == other.y && z == other.z && w == other.w && v == other.v;
}

std::ostream& operator<<(std::ostream& os, const MyStruct& data) {
  os << data.ToString();
  return os;
}

}  // namespace my_module
