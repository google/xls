// AUTOMATICALLY GENERATED FILE FROM `xls/dslx/cpp_transpiler`. DO NOT EDIT!
#include <array>
#include <string>
#include <string_view>
#include <vector>

#include "/tmp/fake_path.h"
#include "absl/base/macros.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_format.h"
#include "absl/types/span.h"
#include "xls/public/status_macros.h"
#include "xls/public/value.h"

[[maybe_unused]] static bool FitsInNBitsSigned(int64_t value, int64_t n) {
  // All bits from [n - 1, 64) must be all zero or all ones.
  if (n >= 64) {
    return true;
  }
  // `mask` is 1111...00000 with n zeros.
  uint64_t mask = ~((uint64_t{1} << n) - 1);
  uint64_t value_as_unsigned = static_cast<uint64_t>(value);
  return (mask & value_as_unsigned) == 0 ||
       (mask & value_as_unsigned) == mask;
}

[[maybe_unused]] static bool FitsInNBitsUnsigned(uint64_t value, int64_t n) {
  if (n >= 64) {
    return true;
  }
  return value < (uint64_t{1} << n);
}

[[maybe_unused]] static std::string __indent(int64_t amount) {
  return std::string(amount * 2, ' ');
}

namespace my_module {

absl::StatusOr<Foo> Foo::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 2) {
    return absl::InvalidArgumentError("Value is not a tuple of 2 elements.");
  }
  Foo result;
  if (!value.element(0).IsBits() || value.element(0).bits().bit_count() != 32) {
    return absl::InvalidArgumentError("Value is not a bits type of 32 bits.");
  }
  result.a = value.element(0).bits().ToUint64().value();
  if (!value.element(1).IsBits() || value.element(1).bits().bit_count() != 64) {
    return absl::InvalidArgumentError("Value is not a bits type of 64 bits.");
  }
  result.b = value.element(1).bits().ToUint64().value();
  return result;
}

absl::StatusOr<::xls::Value> Foo::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(2);
  if (!FitsInNBitsUnsigned(a, 32)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 32 bits", a));
  }
  members[0] = ::xls::Value(::xls::UBits(a, 32));
  if (!FitsInNBitsUnsigned(b, 64)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 64 bits", b));
  }
  members[1] = ::xls::Value(::xls::UBits(b, 64));
  return ::xls::Value::Tuple(members);
}

std::string Foo::ToString(int indent) const {
  std::string result = "Foo {\n";
  result += __indent(indent + 1) + "a: ";
  result += "bits[32]:" + absl::StrFormat("0x%x", a);
  result += ",\n";
  result += __indent(indent + 1) + "b: ";
  result += "bits[64]:" + absl::StrFormat("0x%x", b);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string Foo::ToDslxString(int indent) const {
  std::string result = "Foo {\n";
  result += __indent(indent + 1) + "a: ";
  result += "u32:" + absl::StrFormat("0x%x", a);
  result += ",\n";
  result += __indent(indent + 1) + "b: ";
  result += "u64:" + absl::StrFormat("0x%x", b);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status Foo::Verify() const {
  if (!FitsInNBitsUnsigned(a, 32)) {
    return absl::InvalidArgumentError(absl::StrCat("Foo.a value does not fit in 32 bits: ", absl::StrFormat("0x%x", a)));
  }
  if (!FitsInNBitsUnsigned(b, 64)) {
    return absl::InvalidArgumentError(absl::StrCat("Foo.b value does not fit in 64 bits: ", absl::StrFormat("0x%x", b)));
  }
  return absl::OkStatus();
}

bool Foo::operator==(const Foo& other) const {
    return a == other.a && b == other.b;
}

std::ostream& operator<<(std::ostream& os, const Foo& data) {
  os << data.ToString();
  return os;
}

absl::StatusOr<Bar> Bar::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 1) {
    return absl::InvalidArgumentError("Value is not a tuple of 1 elements.");
  }
  Bar result;
  if (!value.element(0).IsArray() || value.element(0).size() != 2) {
    return absl::InvalidArgumentError("Value is not a array of 2 elements.");
  }
  for (int64_t i0 = 0; i0 < 2; ++i0) {
    XLS_ASSIGN_OR_RETURN(result.c[i0], Foo::FromValue(value.element(0).element(i0)));
  }
  return result;
}

absl::StatusOr<::xls::Value> Bar::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(1);
  {
    std::vector<::xls::Value> elements;
    for (int64_t i0 = 0; i0 < 2; ++i0) {
      ::xls::Value element;
      XLS_ASSIGN_OR_RETURN(element, c[i0].ToValue());
      elements.push_back(element);
    }
    members[0] = ::xls::Value::ArrayOrDie(elements);
  }
  return ::xls::Value::Tuple(members);
}

std::string Bar::ToString(int indent) const {
  std::string result = "Bar {\n";
  result += __indent(indent + 1) + "c: ";
  result += "[\n";
  for (int64_t i0 = 0; i0 < 2; ++i0) {
    result += __indent(indent + 2 + 1);
      result += c[i0].ToString(indent + 2 + 1);
  result += ",\n";
  }
  result += __indent(indent + 2) + "]";
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string Bar::ToDslxString(int indent) const {
  std::string result = "Bar {\n";
  result += __indent(indent + 1) + "c: ";
  result += "[\n";
  for (int64_t i0 = 0; i0 < 2; ++i0) {
    result += __indent(indent + 2 + 1);
      result += c[i0].ToDslxString(indent + 2 + 1);
  result += ",\n";
  }
  result += __indent(indent + 2) + "]";
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status Bar::Verify() const {
  for (int64_t i0 = 0; i0 < 2; ++i0) {
    XLS_RETURN_IF_ERROR(c[i0].Verify());
  }
  return absl::OkStatus();
}

bool Bar::operator==(const Bar& other) const {
    return c == other.c;
}

std::ostream& operator<<(std::ostream& os, const Bar& data) {
  os << data.ToString();
  return os;
}

}  // namespace my_module
