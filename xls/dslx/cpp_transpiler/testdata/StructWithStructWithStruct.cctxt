// AUTOMATICALLY GENERATED FILE FROM `xls/dslx/cpp_transpiler`. DO NOT EDIT!
#include <array>
#include <string>
#include <string_view>
#include <vector>

#include "fake_path.h"
#include "absl/base/macros.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_format.h"
#include "absl/types/span.h"
#include "xls/public/status_macros.h"
#include "xls/public/value.h"

[[maybe_unused]] static bool FitsInNBitsSigned(int64_t value, int64_t n) {
  // All bits from [n - 1, 64) must be all zero or all ones.
  if (n >= 64) {
    return true;
  }
  // `mask` is 1111...00000 with n zeros.
  uint64_t mask = ~((uint64_t{1} << n) - 1);
  uint64_t value_as_unsigned = static_cast<uint64_t>(value);
  return (mask & value_as_unsigned) == 0 ||
       (mask & value_as_unsigned) == mask;
}

[[maybe_unused]] static bool FitsInNBitsUnsigned(uint64_t value, int64_t n) {
  if (n >= 64) {
    return true;
  }
  return value < (uint64_t{1} << n);
}

[[maybe_unused]] static std::string __indent(int64_t amount) {
  return std::string(amount * 2, ' ');
}

namespace my_module {

absl::StatusOr<InnerStruct> InnerStruct::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 2) {
    return absl::InvalidArgumentError("Value is not a tuple of 2 elements.");
  }
  InnerStruct result;
  if (!value.element(0).IsBits() || value.element(0).bits().bit_count() != 32) {
    return absl::InvalidArgumentError("Value is not a bits type of 32 bits.");
  }
  result.x = value.element(0).bits().ToUint64().value();
  if (!value.element(1).IsBits() || value.element(1).bits().bit_count() != 16) {
    return absl::InvalidArgumentError("Value is not a bits type of 16 bits.");
  }
  result.y = value.element(1).bits().ToUint64().value();
  return result;
}

absl::StatusOr<::xls::Value> InnerStruct::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(2);
  if (!FitsInNBitsUnsigned(x, 32)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 32 bits", x));
  }
  members[0] = ::xls::Value(::xls::UBits(x, 32));
  if (!FitsInNBitsUnsigned(y, 16)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 16 bits", y));
  }
  members[1] = ::xls::Value(::xls::UBits(y, 16));
  return ::xls::Value::Tuple(members);
}

std::string InnerStruct::ToString(int indent) const {
  std::string result = "InnerStruct {\n";
  result += __indent(indent + 1) + "x: ";
  result += "bits[32]:" + absl::StrFormat("0x%x", x);
  result += ",\n";
  result += __indent(indent + 1) + "y: ";
  result += "bits[16]:" + absl::StrFormat("0x%x", y);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string InnerStruct::ToDslxString(int indent) const {
  std::string result = "InnerStruct {\n";
  result += __indent(indent + 1) + "x: ";
  result += "u32:" + absl::StrFormat("0x%x", x);
  result += ",\n";
  result += __indent(indent + 1) + "y: ";
  result += "u16:" + absl::StrFormat("0x%x", y);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status InnerStruct::Verify() const {
  if (!FitsInNBitsUnsigned(x, 32)) {
    return absl::InvalidArgumentError(absl::StrCat("InnerStruct.x value does not fit in 32 bits: ", absl::StrFormat("0x%x", x)));
  }
  if (!FitsInNBitsUnsigned(y, 16)) {
    return absl::InvalidArgumentError(absl::StrCat("InnerStruct.y value does not fit in 16 bits: ", absl::StrFormat("0x%x", y)));
  }
  return absl::OkStatus();
}

bool InnerStruct::operator==(const InnerStruct& other) const {
    return x == other.x && y == other.y;
}

std::ostream& operator<<(std::ostream& os, const InnerStruct& data) {
  os << data.ToString();
  return os;
}

absl::StatusOr<MiddleStruct> MiddleStruct::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 2) {
    return absl::InvalidArgumentError("Value is not a tuple of 2 elements.");
  }
  MiddleStruct result;
  if (!value.element(0).IsBits() || value.element(0).bits().bit_count() != 48) {
    return absl::InvalidArgumentError("Value is not a bits type of 48 bits.");
  }
  result.z = value.element(0).bits().ToUint64().value();
  XLS_ASSIGN_OR_RETURN(result.a, InnerStruct::FromValue(value.element(1)));
  return result;
}

absl::StatusOr<::xls::Value> MiddleStruct::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(2);
  if (!FitsInNBitsUnsigned(z, 48)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 48 bits", z));
  }
  members[0] = ::xls::Value(::xls::UBits(z, 48));
  XLS_ASSIGN_OR_RETURN(members[1], a.ToValue());
  return ::xls::Value::Tuple(members);
}

std::string MiddleStruct::ToString(int indent) const {
  std::string result = "MiddleStruct {\n";
  result += __indent(indent + 1) + "z: ";
  result += "bits[48]:" + absl::StrFormat("0x%x", z);
  result += ",\n";
  result += __indent(indent + 1) + "a: ";
  result += a.ToString(indent + 2);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string MiddleStruct::ToDslxString(int indent) const {
  std::string result = "MiddleStruct {\n";
  result += __indent(indent + 1) + "z: ";
  result += "u48:" + absl::StrFormat("0x%x", z);
  result += ",\n";
  result += __indent(indent + 1) + "a: ";
  result += a.ToDslxString(indent + 2);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status MiddleStruct::Verify() const {
  if (!FitsInNBitsUnsigned(z, 48)) {
    return absl::InvalidArgumentError(absl::StrCat("MiddleStruct.z value does not fit in 48 bits: ", absl::StrFormat("0x%x", z)));
  }
  XLS_RETURN_IF_ERROR(a.Verify());
  return absl::OkStatus();
}

bool MiddleStruct::operator==(const MiddleStruct& other) const {
    return z == other.z && a == other.a;
}

std::ostream& operator<<(std::ostream& os, const MiddleStruct& data) {
  os << data.ToString();
  return os;
}

absl::StatusOr<OtherMiddleStruct> OtherMiddleStruct::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 2) {
    return absl::InvalidArgumentError("Value is not a tuple of 2 elements.");
  }
  OtherMiddleStruct result;
  XLS_ASSIGN_OR_RETURN(result.b, InnerStruct::FromValue(value.element(0)));
  if (!value.element(1).IsBits() || value.element(1).bits().bit_count() != 64) {
    return absl::InvalidArgumentError("Value is not a bits type of 64 bits.");
  }
  result.w = value.element(1).bits().ToUint64().value();
  return result;
}

absl::StatusOr<::xls::Value> OtherMiddleStruct::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(2);
  XLS_ASSIGN_OR_RETURN(members[0], b.ToValue());
  if (!FitsInNBitsUnsigned(w, 64)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 64 bits", w));
  }
  members[1] = ::xls::Value(::xls::UBits(w, 64));
  return ::xls::Value::Tuple(members);
}

std::string OtherMiddleStruct::ToString(int indent) const {
  std::string result = "OtherMiddleStruct {\n";
  result += __indent(indent + 1) + "b: ";
  result += b.ToString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "w: ";
  result += "bits[64]:" + absl::StrFormat("0x%x", w);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string OtherMiddleStruct::ToDslxString(int indent) const {
  std::string result = "OtherMiddleStruct {\n";
  result += __indent(indent + 1) + "b: ";
  result += b.ToDslxString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "w: ";
  result += "u64:" + absl::StrFormat("0x%x", w);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status OtherMiddleStruct::Verify() const {
  XLS_RETURN_IF_ERROR(b.Verify());
  if (!FitsInNBitsUnsigned(w, 64)) {
    return absl::InvalidArgumentError(absl::StrCat("OtherMiddleStruct.w value does not fit in 64 bits: ", absl::StrFormat("0x%x", w)));
  }
  return absl::OkStatus();
}

bool OtherMiddleStruct::operator==(const OtherMiddleStruct& other) const {
    return b == other.b && w == other.w;
}

std::ostream& operator<<(std::ostream& os, const OtherMiddleStruct& data) {
  os << data.ToString();
  return os;
}

absl::StatusOr<OuterStruct> OuterStruct::FromValue(const ::xls::Value& value) {
  if (!value.IsTuple() || value.size() != 4) {
    return absl::InvalidArgumentError("Value is not a tuple of 4 elements.");
  }
  OuterStruct result;
  XLS_ASSIGN_OR_RETURN(result.a, InnerStruct::FromValue(value.element(0)));
  XLS_ASSIGN_OR_RETURN(result.b, MiddleStruct::FromValue(value.element(1)));
  XLS_ASSIGN_OR_RETURN(result.c, OtherMiddleStruct::FromValue(value.element(2)));
  if (!value.element(3).IsBits() || value.element(3).bits().bit_count() != 8) {
    return absl::InvalidArgumentError("Value is not a bits type of 8 bits.");
  }
  result.v = value.element(3).bits().ToUint64().value();
  return result;
}

absl::StatusOr<::xls::Value> OuterStruct::ToValue() const {
  std::vector<::xls::Value> members;
  members.resize(4);
  XLS_ASSIGN_OR_RETURN(members[0], a.ToValue());
  XLS_ASSIGN_OR_RETURN(members[1], b.ToValue());
  XLS_ASSIGN_OR_RETURN(members[2], c.ToValue());
  if (!FitsInNBitsUnsigned(v, 8)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 8 bits", v));
  }
  members[3] = ::xls::Value(::xls::UBits(v, 8));
  return ::xls::Value::Tuple(members);
}

std::string OuterStruct::ToString(int indent) const {
  std::string result = "OuterStruct {\n";
  result += __indent(indent + 1) + "a: ";
  result += a.ToString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "b: ";
  result += b.ToString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "c: ";
  result += c.ToString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "v: ";
  result += "bits[8]:" + absl::StrFormat("0x%x", v);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

std::string OuterStruct::ToDslxString(int indent) const {
  std::string result = "OuterStruct {\n";
  result += __indent(indent + 1) + "a: ";
  result += a.ToDslxString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "b: ";
  result += b.ToDslxString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "c: ";
  result += c.ToDslxString(indent + 2);
  result += ",\n";
  result += __indent(indent + 1) + "v: ";
  result += "u8:" + absl::StrFormat("0x%x", v);
  result += ",\n";
  result += __indent(indent) + "}";
  return result;
}

absl::Status OuterStruct::Verify() const {
  XLS_RETURN_IF_ERROR(a.Verify());
  XLS_RETURN_IF_ERROR(b.Verify());
  XLS_RETURN_IF_ERROR(c.Verify());
  if (!FitsInNBitsUnsigned(v, 8)) {
    return absl::InvalidArgumentError(absl::StrCat("OuterStruct.v value does not fit in 8 bits: ", absl::StrFormat("0x%x", v)));
  }
  return absl::OkStatus();
}

bool OuterStruct::operator==(const OuterStruct& other) const {
    return a == other.a && b == other.b && c == other.c && v == other.v;
}

std::ostream& operator<<(std::ostream& os, const OuterStruct& data) {
  os << data.ToString();
  return os;
}

}  // namespace my_module
