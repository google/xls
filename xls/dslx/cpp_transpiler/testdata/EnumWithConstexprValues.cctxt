// AUTOMATICALLY GENERATED FILE FROM `xls/dslx/cpp_transpiler`. DO NOT EDIT!
#include <array>
#include <string>
#include <string_view>
#include <vector>

#include "fake_path.h"
#include "absl/base/macros.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_format.h"
#include "absl/types/span.h"
#include "xls/public/status_macros.h"
#include "xls/public/value.h"

[[maybe_unused]] static bool FitsInNBitsSigned(int64_t value, int64_t n) {
  // All bits from [n - 1, 64) must be all zero or all ones.
  if (n >= 64) {
    return true;
  }
  // `mask` is 1111...00000 with n zeros.
  uint64_t mask = ~((uint64_t{1} << n) - 1);
  uint64_t value_as_unsigned = static_cast<uint64_t>(value);
  return (mask & value_as_unsigned) == 0 ||
       (mask & value_as_unsigned) == mask;
}

[[maybe_unused]] static bool FitsInNBitsUnsigned(uint64_t value, int64_t n) {
  if (n >= 64) {
    return true;
  }
  return value < (uint64_t{1} << n);
}

[[maybe_unused]] static std::string __indent(int64_t amount) {
  return std::string(amount * 2, ' ');
}

namespace my_module {

std::string MyEnumToString(MyEnum value, int64_t indent) {
  switch (value) {
    case MyEnum::kA: return "MyEnum::kA (0)";
    case MyEnum::kB: return "MyEnum::kB (17)";
    case MyEnum::kC: return "MyEnum::kC (289)";
    default: return absl::StrFormat("<unknown> (%v)", static_cast<uint32_t>(value));
  }
}

std::string MyEnumToDslxString(MyEnum value, int64_t indent) {
  switch (value) {
    case MyEnum::kA: return "MyEnum::kA (0)";
    case MyEnum::kB: return "MyEnum::kB (17)";
    case MyEnum::kC: return "MyEnum::kC (289)";
    default: return absl::StrFormat("<unknown> (%v)", static_cast<uint32_t>(value));
  }
}

absl::StatusOr<::xls::Value> MyEnumToValue(MyEnum input) {
  XLS_RETURN_IF_ERROR(VerifyMyEnum(input));
  ::xls::Value result;
  if (!FitsInNBitsUnsigned(static_cast<uint32_t>(input), 32)) {
    return absl::InvalidArgumentError(absl::StrFormat("Unsigned value %#x does not fit in 32 bits", static_cast<uint32_t>(input)));
  }
  result = ::xls::Value(::xls::UBits(static_cast<uint32_t>(input), 32));
  return result;
}

absl::StatusOr<MyEnum> MyEnumFromValue(const ::xls::Value& value) {
  uint32_t result_base;
  if (!value.IsBits() || value.bits().bit_count() != 32) {
    return absl::InvalidArgumentError("Value is not a bits type of 32 bits.");
  }
  result_base = value.bits().ToUint64().value();
  MyEnum result = static_cast<MyEnum>(result_base);
  XLS_RETURN_IF_ERROR(VerifyMyEnum(result));
  return result;
}

absl::Status VerifyMyEnum(MyEnum value) {
  if (!FitsInNBitsUnsigned(static_cast<uint32_t>(value), 32)) {
    return absl::InvalidArgumentError(absl::StrCat("MyEnum value does not fit in 32 bits: ", absl::StrFormat("0x%x", static_cast<uint32_t>(value))));
  }
  switch (value) {
    case MyEnum::kA:
    case MyEnum::kB:
    case MyEnum::kC:
      break;
    default:
      return absl::InvalidArgumentError(absl::StrCat("Invalid value for MyEnum enum: ", value));
  }
  return absl::OkStatus();
}

std::ostream& operator<<(std::ostream& os, MyEnum value) {
  switch (value) {
    case MyEnum::kA:
      os << "MyEnum::kA";
      break;
    case MyEnum::kB:
      os << "MyEnum::kB";
      break;
    case MyEnum::kC:
      os << "MyEnum::kC";
      break;
    default:
      return os << absl::StrFormat("<unknown> (%v)", value);
  }
  return os;
}

}  // namespace my_module
