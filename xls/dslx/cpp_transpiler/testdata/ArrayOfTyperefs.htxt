// AUTOMATICALLY GENERATED FILE FROM `xls/dslx/cpp_transpiler`. DO NOT EDIT!
#ifndef TMP_FAKE_PATH_H_
#define TMP_FAKE_PATH_H_
#include <array>
#include <cstdint>
#include <ostream>
#include <string>
#include <string_view>
#include <vector>

#include "absl/status/statusor.h"
#include "xls/public/value.h"

namespace my_module {

struct Foo {
  uint32_t a;
  uint64_t b;

  static constexpr int64_t kAWidth = 32;
  static constexpr int64_t kBWidth = 64;

  static absl::StatusOr<Foo> FromValue(const ::xls::Value& value);
  absl::StatusOr<::xls::Value> ToValue() const;
  std::string ToString(int indent = 0) const;
  std::string ToDslxString(int indent = 0) const;
  absl::Status Verify() const;
  bool operator==(const Foo& other) const;
  bool operator!=(const Foo& other) const { return !(*this == other); }
  friend std::ostream& operator<<(std::ostream& os, const Foo& data);
};

struct Bar {
  std::array<Foo, 2> c;

  static absl::StatusOr<Bar> FromValue(const ::xls::Value& value);
  absl::StatusOr<::xls::Value> ToValue() const;
  std::string ToString(int indent = 0) const;
  std::string ToDslxString(int indent = 0) const;
  absl::Status Verify() const;
  bool operator==(const Bar& other) const;
  bool operator!=(const Bar& other) const { return !(*this == other); }
  friend std::ostream& operator<<(std::ostream& os, const Bar& data);
};

}  // namespace my_module

#endif  // TMP_FAKE_PATH_H_
