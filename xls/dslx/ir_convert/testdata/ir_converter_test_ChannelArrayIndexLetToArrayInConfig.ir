package test_module

file_number 0 "test_module.x"

proc __test_module__second_0_next<outs__0: bits[32] out, outs__1: bits[32] out, ins__0: bits[32] in, ins__1: bits[32] in>(__state: (), init={()}) {
  chan_interface outs__0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outs__1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface ins__0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface ins__1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  literal.5: token = literal(value=token, id=5)
  literal.6: bits[32] = literal(value=0, id=6)
  literal.3: bits[1] = literal(value=1, id=3)
  tok: token = send(literal.5, literal.6, predicate=literal.3, channel=outs__1, id=7)
  receive.8: (token, bits[32]) = receive(tok, predicate=literal.3, channel=ins__0, id=8)
  __state: () = state_read(state_element=__state, id=2)
  tuple.10: () = tuple(id=10)
  __token: token = literal(value=token, id=1)
  tuple.4: () = tuple(id=4)
  tuple_index.9: token = tuple_index(receive.8, index=0, id=9)
  next_value.11: () = next_value(param=__state, value=tuple.10, id=11)
}

top proc __test_module__first_0_next<>(__state: (), init={()}) {
  chan the_channel__0_0(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface the_channel__0_0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface the_channel__0_0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan the_channel__1_0(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface the_channel__1_0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface the_channel__1_0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan the_channel__0_1(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface the_channel__0_1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface the_channel__0_1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan the_channel__1_1(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface the_channel__1_1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface the_channel__1_1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __test_module__second_0_next_inst(the_channel__0_0, the_channel__0_1, the_channel__1_0, the_channel__1_1, proc=__test_module__second_0_next)
  __state: () = state_read(state_element=__state, id=13)
  __token: token = literal(value=token, id=12)
  literal.14: bits[1] = literal(value=1, id=14)
  tuple.15: () = tuple(id=15)
  next_value.16: () = next_value(param=__state, value=__state, id=16)
}
