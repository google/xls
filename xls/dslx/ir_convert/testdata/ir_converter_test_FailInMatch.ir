package test_module

file_number 0 "test_module.x"

fn __itok__test_module__main(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=42, id=4)
  literal.7: bits[1] = literal(value=1, id=7)
  eq.5: bits[1] = eq(literal.4, x, id=5)
  and.8: bits[1] = and(__activated, literal.7, eq.5, id=8)
  not.9: bits[1] = not(and.8, id=9)
  concat.13: bits[1] = concat(eq.5, id=13)
  assert.10: token = assert(__token, not.9, message="Assertion failure via fail! @ test_module.x:4:20-4:34", id=10)
  one_hot.14: bits[2] = one_hot(concat.13, lsb_prio=true, id=14)
  identity.11: bits[32] = identity(x, id=11)
  after_all.16: token = after_all(assert.10, id=16)
  one_hot_sel.15: bits[32] = one_hot_sel(one_hot.14, cases=[identity.11, x], id=15)
  literal.6: bits[8][7] = literal(value=[102, 97, 105, 108, 117, 114, 101], id=6)
  literal.12: bits[1] = literal(value=1, id=12)
  ret tuple.17: (token, bits[32]) = tuple(after_all.16, one_hot_sel.15, id=17)
}

fn __test_module__main(x: bits[32]) -> bits[32] {
  after_all.19: token = after_all(id=19)
  literal.20: bits[1] = literal(value=1, id=20)
  invoke.21: (token, bits[32]) = invoke(after_all.19, literal.20, x, to_apply=__itok__test_module__main, id=21)
  ret tuple_index.22: bits[32] = tuple_index(invoke.21, index=1, id=22)
}
