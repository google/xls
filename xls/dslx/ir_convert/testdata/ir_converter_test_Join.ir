package test_module

file_number 0 "test_module.x"

chan main_chandecl_test_module_x_33_18_33_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_12_20_12_28(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_13_20_13_28(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_14_20_14_28(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_15_20_15_28(bits[32], id=4, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

fn __test_module__foo.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1)
}

top proc __test_module__main_0_next(__token: token, __state: (), init={()}) {
  literal.4: bits[1] = literal(value=1, id=4)
  tuple.5: () = tuple(id=5)
  after_all.6: token = after_all(__token, id=6)
  next (after_all.6, tuple.5)
}

proc __test_module__main__foo_0_next(__token: token, __state: bits[32], init={0}) {
  zero_ext.10: bits[32] = zero_ext(__state, new_bit_count=32, id=10)
  tok0: token = send(__token, zero_ext.10, channel_id=1, id=11)
  zero_ext.16: bits[32] = zero_ext(__state, new_bit_count=32, id=16)
  zero_ext.12: bits[32] = zero_ext(__state, new_bit_count=32, id=12)
  zero_ext.14: bits[32] = zero_ext(__state, new_bit_count=32, id=14)
  zero_ext.18: bits[32] = zero_ext(__state, new_bit_count=32, id=18)
  tok3: token = send(tok0, zero_ext.16, channel_id=1, id=17)
  tok1: token = send(__token, zero_ext.12, channel_id=2, id=13)
  tok2: token = send(__token, zero_ext.14, channel_id=3, id=15)
  send.19: token = send(tok0, zero_ext.18, channel_id=1, id=19)
  receive.21: (token, bits[32]) = receive(tok3, channel_id=4, id=21)
  literal.25: bits[32] = literal(value=1, id=25)
  tok: token = after_all(tok0, tok1, tok2, send.19, id=20)
  tuple_index.22: token = tuple_index(receive.21, index=0, id=22)
  literal.9: bits[1] = literal(value=1, id=9)
  tok__1: token = tuple_index(receive.21, index=0, id=23)
  value: bits[32] = tuple_index(receive.21, index=1, id=24)
  add.26: bits[32] = add(__state, literal.25, id=26)
  after_all.27: token = after_all(__token, tok0, tok1, tok2, tok3, send.19, tok, tuple_index.22, id=27)
  next (after_all.27, add.26)
}
