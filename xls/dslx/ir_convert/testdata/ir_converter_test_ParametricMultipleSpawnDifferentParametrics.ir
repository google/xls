package test_module

file_number 0 "test_module.x"

proc __test_module__spawnee1_0__1_next<sender: bits[1] out, receiver: bits[1] in>(__state: (), init={()}) {
  chan_interface sender(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface receiver(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  __state: () = state_read(state_element=__state, id=2)
  tuple.8: () = tuple(id=8)
  __token: token = literal(value=token, id=1)
  literal.3: bits[1] = literal(value=1, id=3)
  M: bits[32] = literal(value=1, id=4)
  sender: bits[1] = send_channel_end(id=5)
  receiver: bits[1] = recv_channel_end(id=6)
  tuple.7: () = tuple(id=7)
  next_value.9: () = next_value(param=__state, value=tuple.8, id=9)
}

proc __test_module__spawnee1_0__2_next<sender: bits[2] out, receiver: bits[2] in>(__state: (), init={()}) {
  chan_interface sender(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface receiver(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  __state: () = state_read(state_element=__state, id=11)
  tuple.17: () = tuple(id=17)
  __token: token = literal(value=token, id=10)
  literal.12: bits[1] = literal(value=1, id=12)
  M: bits[32] = literal(value=2, id=13)
  sender: bits[2] = send_channel_end(id=14)
  receiver: bits[2] = recv_channel_end(id=15)
  tuple.16: () = tuple(id=16)
  next_value.18: () = next_value(param=__state, value=tuple.17, id=18)
}

top proc __test_module__main_0_next<>(__state: (), init={()}) {
  chan data_0(bits[1], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface data_0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface data_0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan data_1(bits[2], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface data_1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface data_1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __test_module__spawnee1_0__1_next_inst(data_0, data_0, proc=__test_module__spawnee1_0__1_next)
  proc_instantiation __test_module__spawnee1_0__2_next_inst(data_1, data_1, proc=__test_module__spawnee1_0__2_next)
  __state: () = state_read(state_element=__state, id=20)
  tuple.27: () = tuple(id=27)
  __token: token = literal(value=token, id=19)
  literal.21: bits[1] = literal(value=1, id=21)
  data_0: bits[1] = send_channel_end(id=22)
  data_0__1: bits[1] = recv_channel_end(id=23)
  data_1: bits[2] = send_channel_end(id=24)
  data_1__1: bits[2] = recv_channel_end(id=25)
  tuple.26: () = tuple(id=26)
  next_value.28: () = next_value(param=__state, value=tuple.27, id=28)
}
