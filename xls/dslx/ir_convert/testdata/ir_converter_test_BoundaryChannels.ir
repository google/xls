package test_module

file_number 0 "test_module.x"

chan test_module__in_0(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, metadata="""""")
chan test_module__in_1(bits[32], id=1, kind=streaming, ops=receive_only, flow_control=ready_valid, metadata="""""")
chan test_module__output(bits[32], id=2, kind=streaming, ops=send_only, flow_control=ready_valid, metadata="""""")

top proc __test_module__foo_0_next(__token: token, __state: (), init={()}) {
  receive.4: (token, bits[32]) = receive(__token, channel_id=0, id=4)
  tok: token = tuple_index(receive.4, index=0, id=6)
  receive.8: (token, bits[32]) = receive(tok, channel_id=1, id=8)
  a: bits[32] = tuple_index(receive.4, index=1, id=7)
  b: bits[32] = tuple_index(receive.8, index=1, id=11)
  tok__1: token = tuple_index(receive.8, index=0, id=10)
  add.12: bits[32] = add(a, b, id=12)
  tuple_index.5: token = tuple_index(receive.4, index=0, id=5)
  tuple_index.9: token = tuple_index(receive.8, index=0, id=9)
  tok__2: token = send(tok__1, add.12, channel_id=2, id=13)
  literal.3: bits[1] = literal(value=1, id=3)
  tuple.14: () = tuple(id=14)
  after_all.15: token = after_all(__token, tuple_index.5, tuple_index.9, tok__2, id=15)
  next (after_all.15, tuple.14)
}
