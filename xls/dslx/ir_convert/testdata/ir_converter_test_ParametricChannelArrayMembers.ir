package test_module

file_number 0 "test_module.x"

proc __test_module__spawnee_0__16_32_next<in_chans__0: bits[32] in, in_chans__1: bits[32] in, in_chans__2: bits[32] in, out_chans__0: bits[16] out, out_chans__1: bits[16] out>(__state: (), init={()}) {
  chan_interface in_chans__0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface in_chans__1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface in_chans__2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface out_chans__0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface out_chans__1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  literal.10: token = literal(value=token, id=10)
  literal.3: bits[1] = literal(value=1, id=3)
  literal.7: token = literal(value=token, id=7)
  literal.8: bits[16] = literal(value=65535, id=8)
  receive.11: (token, bits[32]) = receive(literal.10, predicate=literal.3, channel=in_chans__1, id=11)
  __state: () = state_read(state_element=__state, id=2)
  tuple.13: () = tuple(id=13)
  __token: token = literal(value=token, id=1)
  N: bits[32] = literal(value=32, id=4)
  M: bits[32] = literal(value=16, id=5)
  tuple.6: () = tuple(id=6)
  send.9: token = send(literal.7, literal.8, predicate=literal.3, channel=out_chans__0, id=9)
  tuple_index.12: token = tuple_index(receive.11, index=0, id=12)
  next_value.14: () = next_value(param=__state, value=tuple.13, id=14)
}

top proc __test_module__main_0_next<ins__0: bits[32] in, ins__1: bits[32] in, ins__2: bits[32] in, outs__0: bits[16] out, outs__1: bits[16] out>(__state: (), init={()}) {
  chan_interface ins__0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface ins__1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface ins__2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outs__0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outs__1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  proc_instantiation __test_module__spawnee_0__16_32_next_inst(ins__0, ins__1, ins__2, outs__0, outs__1, proc=__test_module__spawnee_0__16_32_next)
  literal.22: token = literal(value=token, id=22)
  literal.17: bits[1] = literal(value=1, id=17)
  literal.19: token = literal(value=token, id=19)
  literal.20: bits[16] = literal(value=42, id=20)
  receive.23: (token, bits[32]) = receive(literal.22, predicate=literal.17, channel=ins__1, id=23)
  __state: () = state_read(state_element=__state, id=16)
  tuple.25: () = tuple(id=25)
  __token: token = literal(value=token, id=15)
  tuple.18: () = tuple(id=18)
  send.21: token = send(literal.19, literal.20, predicate=literal.17, channel=outs__0, id=21)
  tuple_index.24: token = tuple_index(receive.23, index=0, id=24)
  next_value.26: () = next_value(param=__state, value=tuple.25, id=26)
}
