package test_module

file_number 0 "test_module.x"

top proc __test_module__main_0_next<outchs__0_0: bits[16] out, outchs__1_0: bits[16] out, outchs__0_1: bits[16] out, outchs__1_1: bits[16] out, outchs__0_2: bits[16] out, outchs__1_2: bits[16] out, outchs__0_3: bits[16] out, outchs__1_3: bits[16] out, inchs__0_0: bits[16] in, inchs__1_0: bits[16] in, inchs__0_1: bits[16] in, inchs__1_1: bits[16] in, inchs__0_2: bits[16] in, inchs__1_2: bits[16] in, inchs__0_3: bits[16] in, inchs__1_3: bits[16] in>(__state: (), init={()}) {
  chan_interface outchs__0_0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__1_0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__0_1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__1_1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__0_2(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__1_2(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__0_3(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface outchs__1_3(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__0_0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__1_0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__0_1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__1_1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__0_2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__1_2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__0_3(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface inchs__1_3(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  literal.5: token = literal(value=token, id=5)
  literal.3: bits[1] = literal(value=1, id=3)
  receive.6: (token, bits[16]) = receive(literal.5, predicate=literal.3, channel=inchs__1_0, id=6)
  tok: token = tuple_index(receive.6, index=0, id=8)
  val: bits[16] = tuple_index(receive.6, index=1, id=9)
  __state: () = state_read(state_element=__state, id=2)
  __token: token = literal(value=token, id=1)
  tuple.4: () = tuple(id=4)
  tuple_index.7: token = tuple_index(receive.6, index=0, id=7)
  send.10: token = send(tok, val, predicate=literal.3, channel=outchs__1_3, id=10)
  next_value.11: () = next_value(param=__state, value=__state, id=11)
}
