package test_module

file_number 0 "test_module.x"

chan main_chandecl_test_module_x_38_18_38_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

fn __test_module__producer.init() -> bits[1] {
  ret literal.1: bits[1] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[1] {
  ret literal.2: bits[1] = literal(value=0, id=2)
}

top proc __test_module__main_0_next(__token: token, __state: (), init={()}) {
  literal.5: bits[1] = literal(value=1, id=5)
  tuple.6: () = tuple(id=6)
  after_all.7: token = after_all(__token, id=7)
  next (after_all.7, tuple.6)
}

proc __test_module__main__producer_0_next(__token: token, __state: bits[1], init={0}) {
  zero_ext.11: bits[32] = zero_ext(__state, new_bit_count=32, id=11)
  _: token = send(__token, zero_ext.11, predicate=__state, channel_id=0, id=12)
  literal.10: bits[1] = literal(value=1, id=10)
  not.13: bits[1] = not(__state, id=13)
  after_all.14: token = after_all(__token, _, id=14)
  next (after_all.14, not.13)
}

proc __test_module__main__consumer_0_next(__token: token, __state: bits[1], init={0}) {
  receive.19: (token, bits[32]) = receive(__token, predicate=__state, channel_id=0, id=19)
  literal.18: bits[32] = literal(value=42, id=18)
  tuple_index.21: bits[32] = tuple_index(receive.19, index=1, id=21)
  tuple_index.20: token = tuple_index(receive.19, index=0, id=20)
  sel.22: bits[32] = sel(__state, cases=[literal.18, tuple_index.21], id=22)
  tuple.23: (token, bits[32]) = tuple(tuple_index.20, sel.22, id=23)
  literal.17: bits[1] = literal(value=1, id=17)
  tuple_index.24: token = tuple_index(tuple.23, index=0, id=24)
  foo: bits[32] = tuple_index(tuple.23, index=1, id=25)
  not.26: bits[1] = not(__state, id=26)
  after_all.27: token = after_all(__token, tuple_index.20, id=27)
  next (after_all.27, not.26)
}
