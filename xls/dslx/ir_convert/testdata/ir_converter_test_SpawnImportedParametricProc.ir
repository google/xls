package test_module

file_number 0 "imported.x"
file_number 1 "test_module.x"

proc __imported__Importee_0__16_next<output_c: bits[16] out>(__state: bits[16], init={123}) {
  chan_interface output_c(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  literal.6: token = literal(value=token, id=6)
  __state: bits[16] = state_read(state_element=__state, id=2)
  literal.3: bits[1] = literal(value=1, id=3)
  __token: token = literal(value=token, id=1)
  N: bits[32] = literal(value=16, id=4)
  tuple.5: () = tuple(id=5)
  send.7: token = send(literal.6, __state, predicate=literal.3, channel=output_c, id=7)
  next_value.8: () = next_value(param=__state, value=__state, id=8)
}

top proc __test_module__Importer_0_next<>(__state: (), init={()}) {
  chan chan0(bits[16], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface chan0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface chan0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __imported__Importee_0__16_next_inst(chan0, proc=__imported__Importee_0__16_next)
  __state: () = state_read(state_element=__state, id=10)
  tuple.13: () = tuple(id=13)
  __token: token = literal(value=token, id=9)
  literal.11: bits[1] = literal(value=1, id=11)
  tuple.12: () = tuple(id=12)
  next_value.14: () = next_value(param=__state, value=tuple.13, id=14)
}
