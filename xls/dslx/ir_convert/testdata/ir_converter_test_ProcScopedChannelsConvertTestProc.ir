package test_module

file_number 0 "test_module.x"

proc __test_module__TestUtilityProc_0_next<req_r: () in, resp_s: () out>(__state: (), init={()}) {
  chan_interface req_r(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface resp_s(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  after_all.5: token = after_all(id=5)
  literal.3: bits[1] = literal(value=1, id=3)
  receive.6: (token, ()) = receive(after_all.5, predicate=literal.3, channel=req_r, id=6)
  tok: token = tuple_index(receive.6, index=0, id=8)
  tuple.10: () = tuple(id=10)
  __state: () = state_read(state_element=__state, id=2)
  tuple.12: () = tuple(id=12)
  __token: token = literal(value=token, id=1)
  tuple.4: () = tuple(id=4)
  tuple_index.7: token = tuple_index(receive.6, index=0, id=7)
  tuple_index.9: () = tuple_index(receive.6, index=1, id=9)
  send.11: token = send(tok, tuple.10, predicate=literal.3, channel=resp_s, id=11)
  next_value.13: () = next_value(param=__state, value=tuple.12, id=13)
}

top proc __test_module__TestProc_0_next<terminator: bits[1] out>(__state: (), init={()}) {
  chan_interface terminator(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan tester_req((), id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface tester_req(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface tester_req(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan tester_resp((), id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface tester_resp(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface tester_resp(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __test_module__TestUtilityProc_0_next_inst(tester_req, tester_resp, proc=__test_module__TestUtilityProc_0_next)
  after_all.21: token = after_all(id=21)
  literal.16: bits[1] = literal(value=1, id=16)
  receive.22: (token, ()) = receive(after_all.21, predicate=literal.16, channel=tester_resp, id=22)
  after_all.18: token = after_all(id=18)
  tuple.19: () = tuple(id=19)
  tok__1: token = tuple_index(receive.22, index=0, id=24)
  literal.26: bits[1] = literal(value=1, id=26)
  __state: () = state_read(state_element=__state, id=15)
  tuple.28: () = tuple(id=28)
  __token: token = literal(value=token, id=14)
  tuple.17: () = tuple(id=17)
  tok: token = send(after_all.18, tuple.19, predicate=literal.16, channel=tester_req, id=20)
  tuple_index.23: token = tuple_index(receive.22, index=0, id=23)
  tuple_index.25: () = tuple_index(receive.22, index=1, id=25)
  send.27: token = send(tok__1, literal.26, predicate=literal.16, channel=terminator, id=27)
  next_value.29: () = next_value(param=__state, value=tuple.28, id=29)
}
