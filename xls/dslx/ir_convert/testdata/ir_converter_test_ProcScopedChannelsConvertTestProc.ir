package test_module

file_number 0 "test_module.x"

proc __test_module__TestUtilityProc_0_next<req_r: () in, resp_s: () out>(__state: (), init={()}) {
  chan_interface req_r(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface resp_s(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  after_all.7: token = after_all(id=7)
  literal.3: bits[1] = literal(value=1, id=3)
  receive.8: (token, ()) = receive(after_all.7, predicate=literal.3, channel=req_r, id=8)
  req_r: () = recv_channel_end(id=4)
  resp_s: () = send_channel_end(id=5)
  tok: token = tuple_index(receive.8, index=0, id=10)
  tuple.12: () = tuple(id=12)
  __state: () = state_read(state_element=__state, id=2)
  tuple.14: () = tuple(id=14)
  __token: token = literal(value=token, id=1)
  tuple.6: ((), ()) = tuple(req_r, resp_s, id=6)
  tuple_index.9: token = tuple_index(receive.8, index=0, id=9)
  tuple_index.11: () = tuple_index(receive.8, index=1, id=11)
  send.13: token = send(tok, tuple.12, predicate=literal.3, channel=resp_s, id=13)
  next_value.15: () = next_value(param=__state, value=tuple.14, id=15)
}

top proc __test_module__TestProc_0_next<terminator: bits[1] out>(__state: (), init={()}) {
  chan_interface terminator(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan tester_req((), id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface tester_req(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface tester_req(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan tester_resp((), id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface tester_resp(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface tester_resp(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __test_module__TestUtilityProc_0_next_inst(tester_req, tester_resp, proc=__test_module__TestUtilityProc_0_next)
  after_all.28: token = after_all(id=28)
  literal.18: bits[1] = literal(value=1, id=18)
  receive.29: (token, ()) = receive(after_all.28, predicate=literal.18, channel=tester_resp, id=29)
  terminator: bits[1] = send_channel_end(id=19)
  tester_req: () = send_channel_end(id=20)
  tester_resp__1: () = recv_channel_end(id=23)
  after_all.25: token = after_all(id=25)
  tuple.26: () = tuple(id=26)
  tok__1: token = tuple_index(receive.29, index=0, id=31)
  literal.33: bits[1] = literal(value=1, id=33)
  __state: () = state_read(state_element=__state, id=17)
  tuple.35: () = tuple(id=35)
  __token: token = literal(value=token, id=16)
  tester_req__1: () = recv_channel_end(id=21)
  tester_resp: () = send_channel_end(id=22)
  tuple.24: (bits[1], (), ()) = tuple(terminator, tester_req, tester_resp__1, id=24)
  tok: token = send(after_all.25, tuple.26, predicate=literal.18, channel=tester_req, id=27)
  tuple_index.30: token = tuple_index(receive.29, index=0, id=30)
  tuple_index.32: () = tuple_index(receive.29, index=1, id=32)
  send.34: token = send(tok__1, literal.33, predicate=literal.18, channel=terminator, id=34)
  next_value.36: () = next_value(param=__state, value=tuple.35, id=36)
}
