package test_module

file_number 0 "test_module.x"

fn __itok__test_module__callee_callee(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  not.7: bits[1] = not(__activated, id=7)
  literal.5: bits[32] = literal(value=3, id=5)
  assert.8: token = assert(__token, not.7, message="Assertion failure via fail! @ test_module.x:3:16-3:38", id=8)
  ugt.6: bits[1] = ugt(x, literal.5, id=6)
  after_all.10: token = after_all(assert.8, id=10)
  literal.4: bits[8][7] = literal(value=[102, 97, 105, 108, 117, 114, 101], id=4)
  _: bits[1] = identity(ugt.6, id=9)
  ret tuple.11: (token, bits[32]) = tuple(after_all.10, x, id=11)
}

fn __itok__test_module__main(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  invoke.15: (token, bits[32]) = invoke(__token, __activated, x, to_apply=__itok__test_module__callee_callee, id=15)
  tuple_index.16: token = tuple_index(invoke.15, index=0, id=16)
  after_all.18: token = after_all(tuple_index.16, id=18)
  tuple_index.17: bits[32] = tuple_index(invoke.15, index=1, id=17)
  ret tuple.19: (token, bits[32]) = tuple(after_all.18, tuple_index.17, id=19)
}

fn __itok__test_module__callee(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  invoke.23: (token, bits[32]) = invoke(__token, __activated, x, to_apply=__itok__test_module__main, id=23)
  tuple_index.24: token = tuple_index(invoke.23, index=0, id=24)
  after_all.26: token = after_all(tuple_index.24, id=26)
  tuple_index.25: bits[32] = tuple_index(invoke.23, index=1, id=25)
  ret tuple.27: (token, bits[32]) = tuple(after_all.26, tuple_index.25, id=27)
}
