package test_module

file_number 0 "imported1.x"
file_number 1 "test_module.x"

chan test_module__ins_outs__0(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__ins_outs__1(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__ins_outs__2(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__ins_outs__3(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)

fn __imported1__AProc.init__4() -> () {
  N: bits[32] = literal(value=4, id=1)
  ret tuple.2: () = tuple(id=2)
}

proc __test_module__main_0_next(__state: (), init={()}) {
  literal.7: token = literal(value=token, id=7)
  i: bits[32] = literal(value=0, id=6)
  literal.5: bits[1] = literal(value=1, id=5)
  literal.10: token = literal(value=token, id=10)
  i__1: bits[32] = literal(value=1, id=9)
  literal.13: token = literal(value=token, id=13)
  i__2: bits[32] = literal(value=2, id=12)
  literal.16: token = literal(value=token, id=16)
  i__3: bits[32] = literal(value=3, id=15)
  __state: () = state_read(state_element=__state, id=4)
  __token: token = literal(value=token, id=3)
  send.8: token = send(literal.7, i, predicate=literal.5, channel=test_module__ins_outs__0, id=8)
  send.11: token = send(literal.10, i__1, predicate=literal.5, channel=test_module__ins_outs__1, id=11)
  send.14: token = send(literal.13, i__2, predicate=literal.5, channel=test_module__ins_outs__2, id=14)
  send.17: token = send(literal.16, i__3, predicate=literal.5, channel=test_module__ins_outs__3, id=17)
  tuple.18: () = tuple(id=18)
  next_value.19: () = next_value(param=__state, value=__state, id=19)
}

proc __imported1__main__AProc_0__4_next(__state: (), init={()}) {
  literal.25: token = literal(value=token, id=25)
  literal.22: bits[1] = literal(value=1, id=22)
  literal.32: token = literal(value=token, id=32)
  literal.39: token = literal(value=token, id=39)
  literal.46: token = literal(value=token, id=46)
  receive.26: (token, bits[32]) = receive(literal.25, predicate=literal.22, channel=test_module__ins_outs__0, id=26)
  receive.33: (token, bits[32]) = receive(literal.32, predicate=literal.22, channel=test_module__ins_outs__1, id=33)
  receive.40: (token, bits[32]) = receive(literal.39, predicate=literal.22, channel=test_module__ins_outs__2, id=40)
  receive.47: (token, bits[32]) = receive(literal.46, predicate=literal.22, channel=test_module__ins_outs__3, id=47)
  __token: token = literal(value=token, id=20)
  v: bits[32] = tuple_index(receive.26, index=1, id=29)
  v__1: bits[32] = tuple_index(receive.33, index=1, id=36)
  v__2: bits[32] = tuple_index(receive.40, index=1, id=43)
  v__3: bits[32] = tuple_index(receive.47, index=1, id=50)
  __state: () = state_read(state_element=__state, id=21)
  N: bits[32] = literal(value=4, id=23)
  i: bits[32] = literal(value=0, id=24)
  tuple_index.27: token = tuple_index(receive.26, index=0, id=27)
  tuple_index.28: token = tuple_index(receive.26, index=0, id=28)
  trace.30: token = trace(__token, literal.22, format="recv: {}", data_operands=[v], id=30)
  i__1: bits[32] = literal(value=1, id=31)
  tuple_index.34: token = tuple_index(receive.33, index=0, id=34)
  tuple_index.35: token = tuple_index(receive.33, index=0, id=35)
  trace.37: token = trace(__token, literal.22, format="recv: {}", data_operands=[v__1], id=37)
  i__2: bits[32] = literal(value=2, id=38)
  tuple_index.41: token = tuple_index(receive.40, index=0, id=41)
  tuple_index.42: token = tuple_index(receive.40, index=0, id=42)
  trace.44: token = trace(__token, literal.22, format="recv: {}", data_operands=[v__2], id=44)
  i__3: bits[32] = literal(value=3, id=45)
  tuple_index.48: token = tuple_index(receive.47, index=0, id=48)
  tuple_index.49: token = tuple_index(receive.47, index=0, id=49)
  trace.51: token = trace(__token, literal.22, format="recv: {}", data_operands=[v__3], id=51)
  tuple.52: () = tuple(id=52)
  next_value.53: () = next_value(param=__state, value=__state, id=53)
}

proc __imported1__main__AProc_1__4_next(__state: (), init={()}) {
  literal.59: token = literal(value=token, id=59)
  literal.56: bits[1] = literal(value=1, id=56)
  literal.66: token = literal(value=token, id=66)
  literal.73: token = literal(value=token, id=73)
  literal.80: token = literal(value=token, id=80)
  receive.60: (token, bits[32]) = receive(literal.59, predicate=literal.56, channel=test_module__ins_outs__0, id=60)
  receive.67: (token, bits[32]) = receive(literal.66, predicate=literal.56, channel=test_module__ins_outs__1, id=67)
  receive.74: (token, bits[32]) = receive(literal.73, predicate=literal.56, channel=test_module__ins_outs__2, id=74)
  receive.81: (token, bits[32]) = receive(literal.80, predicate=literal.56, channel=test_module__ins_outs__3, id=81)
  __token: token = literal(value=token, id=54)
  v: bits[32] = tuple_index(receive.60, index=1, id=63)
  v__1: bits[32] = tuple_index(receive.67, index=1, id=70)
  v__2: bits[32] = tuple_index(receive.74, index=1, id=77)
  v__3: bits[32] = tuple_index(receive.81, index=1, id=84)
  __state: () = state_read(state_element=__state, id=55)
  N: bits[32] = literal(value=4, id=57)
  i: bits[32] = literal(value=0, id=58)
  tuple_index.61: token = tuple_index(receive.60, index=0, id=61)
  tuple_index.62: token = tuple_index(receive.60, index=0, id=62)
  trace.64: token = trace(__token, literal.56, format="recv: {}", data_operands=[v], id=64)
  i__1: bits[32] = literal(value=1, id=65)
  tuple_index.68: token = tuple_index(receive.67, index=0, id=68)
  tuple_index.69: token = tuple_index(receive.67, index=0, id=69)
  trace.71: token = trace(__token, literal.56, format="recv: {}", data_operands=[v__1], id=71)
  i__2: bits[32] = literal(value=2, id=72)
  tuple_index.75: token = tuple_index(receive.74, index=0, id=75)
  tuple_index.76: token = tuple_index(receive.74, index=0, id=76)
  trace.78: token = trace(__token, literal.56, format="recv: {}", data_operands=[v__2], id=78)
  i__3: bits[32] = literal(value=3, id=79)
  tuple_index.82: token = tuple_index(receive.81, index=0, id=82)
  tuple_index.83: token = tuple_index(receive.81, index=0, id=83)
  trace.85: token = trace(__token, literal.56, format="recv: {}", data_operands=[v__3], id=85)
  tuple.86: () = tuple(id=86)
  next_value.87: () = next_value(param=__state, value=__state, id=87)
}
