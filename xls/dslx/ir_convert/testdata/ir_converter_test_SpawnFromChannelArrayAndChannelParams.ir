package test_module

file_number 0 "test_module.x"

proc __test_module__spawnee_0_next<in_chans__0: bits[32] in, in_chans__1: bits[32] in, in_chans__2: bits[32] in, out_chan: bits[16] out>(__state: (), init={()}) {
  chan_interface in_chans__0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface in_chans__1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface in_chans__2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface out_chan(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  literal.9: token = literal(value=token, id=9)
  literal.3: bits[1] = literal(value=1, id=3)
  out_chan: bits[16] = send_channel_end(id=4)
  literal.6: token = literal(value=token, id=6)
  literal.7: bits[16] = literal(value=42, id=7)
  receive.10: (token, bits[32]) = receive(literal.9, predicate=literal.3, channel=in_chans__1, id=10)
  __state: () = state_read(state_element=__state, id=2)
  tuple.12: () = tuple(id=12)
  __token: token = literal(value=token, id=1)
  tuple.5: (bits[16]) = tuple(out_chan, id=5)
  send.8: token = send(literal.6, literal.7, predicate=literal.3, channel=out_chan, id=8)
  tuple_index.11: token = tuple_index(receive.10, index=0, id=11)
  next_value.13: () = next_value(param=__state, value=tuple.12, id=13)
}

top proc __test_module__main_0_next<in_chans__0: bits[32] in, in_chans__1: bits[32] in, in_chans__2: bits[32] in, out_chans__0: bits[16] out, out_chans__1: bits[16] out>(__state: (), init={()}) {
  chan_interface in_chans__0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface in_chans__1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface in_chans__2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface out_chans__0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface out_chans__1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  proc_instantiation __test_module__spawnee_0_next_inst(in_chans__0, in_chans__1, in_chans__2, out_chans__1, proc=__test_module__spawnee_0_next)
  __state: () = state_read(state_element=__state, id=15)
  tuple.18: () = tuple(id=18)
  __token: token = literal(value=token, id=14)
  literal.16: bits[1] = literal(value=1, id=16)
  tuple.17: () = tuple(id=17)
  next_value.19: () = next_value(param=__state, value=tuple.18, id=19)
}
