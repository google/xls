package test_module

file_number 0 "test_module.x"

fn __itok__test_module__main(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=42, id=4)
  eq.5: bits[1] = eq(literal.4, x, id=5)
  or.16: bits[1] = or(eq.5, id=16)
  literal.7: bits[1] = literal(value=1, id=7)
  not.17: bits[1] = not(or.16, id=17)
  and.8: bits[1] = and(__activated, literal.7, eq.5, id=8)
  and.18: bits[1] = and(__activated, not.17, id=18)
  literal.14: bits[32] = literal(value=1, id=14)
  not.9: bits[1] = not(and.8, id=9)
  not.19: bits[1] = not(and.18, id=19)
  concat.22: bits[1] = concat(eq.5, id=22)
  add.15: bits[32] = add(x, literal.14, id=15)
  assert.10: token = assert(__token, not.9, message="Assertion failure via fail! @ test_module.x:4:20-4:36", id=10)
  assert.20: token = assert(__token, not.19, message="Assertion failure via fail! @ test_module.x:5:15-5:37", id=20)
  one_hot.23: bits[2] = one_hot(concat.22, lsb_prio=true, id=23)
  identity.11: bits[32] = identity(x, id=11)
  identity.21: bits[32] = identity(add.15, id=21)
  after_all.25: token = after_all(assert.10, assert.20, id=25)
  one_hot_sel.24: bits[32] = one_hot_sel(one_hot.23, cases=[identity.11, identity.21], id=24)
  literal.6: bits[8][9] = literal(value=[102, 97, 105, 108, 117, 114, 101, 95, 48], id=6)
  literal.12: bits[1] = literal(value=1, id=12)
  literal.13: bits[8][9] = literal(value=[102, 97, 105, 108, 117, 114, 101, 95, 49], id=13)
  ret tuple.26: (token, bits[32]) = tuple(after_all.25, one_hot_sel.24, id=26)
}

fn __test_module__main(x: bits[32]) -> bits[32] {
  after_all.28: token = after_all(id=28)
  literal.29: bits[1] = literal(value=1, id=29)
  invoke.30: (token, bits[32]) = invoke(after_all.28, literal.29, x, to_apply=__itok__test_module__main, id=30)
  ret tuple_index.31: bits[32] = tuple_index(invoke.30, index=1, id=31)
}
