package test_module

file_number 0 "test_module.x"

proc __test_module__producer_0_next<input_c: bits[32] out>(__state: bits[32], init={0}) {
  chan_interface input_c(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  __state: bits[32] = state_read(state_element=__state, id=2)
  literal.8: bits[32] = literal(value=1, id=8)
  input_c: bits[32] = send_channel_end(id=4)
  after_all.6: token = after_all(id=6)
  literal.3: bits[1] = literal(value=1, id=3)
  add.9: bits[32] = add(__state, literal.8, id=9)
  __token: token = literal(value=token, id=1)
  tuple.5: (bits[32]) = tuple(input_c, id=5)
  tok: token = send(after_all.6, __state, predicate=literal.3, channel=input_c, id=7)
  next_value.10: () = next_value(param=__state, value=add.9, id=10)
}

proc __test_module__consumer_0_next<input_c: bits[32] in>(__state: bits[32], init={0}) {
  chan_interface input_c(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  after_all.16: token = after_all(id=16)
  literal.13: bits[1] = literal(value=1, id=13)
  receive.17: (token, bits[32]) = receive(after_all.16, predicate=literal.13, channel=input_c, id=17)
  i: bits[32] = tuple_index(receive.17, index=1, id=20)
  input_c: bits[32] = recv_channel_end(id=14)
  __state: bits[32] = state_read(state_element=__state, id=12)
  add.21: bits[32] = add(i, i, id=21)
  __token: token = literal(value=token, id=11)
  tuple.15: (bits[32]) = tuple(input_c, id=15)
  tuple_index.18: token = tuple_index(receive.17, index=0, id=18)
  tok: token = tuple_index(receive.17, index=0, id=19)
  next_value.22: () = next_value(param=__state, value=add.21, id=22)
}

proc __test_module__main_0_next<>(__state: (), init={()}) {
  chan my_chan0(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=0, bypass=true, register_push_outputs=false, register_pop_outputs=false)
  chan_interface my_chan0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface my_chan0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan my_chan1(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=1, bypass=false, register_push_outputs=true, register_pop_outputs=true)
  chan_interface my_chan1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface my_chan1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan my_chan2(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=0, bypass=true, register_push_outputs=false, register_pop_outputs=false, input_flop_kind=zero_latency, output_flop_kind=flop)
  chan_interface my_chan2(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface my_chan2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __test_module__producer_0_next_inst(my_chan0, proc=__test_module__producer_0_next)
  proc_instantiation __test_module__consumer_0_next_inst(my_chan0, proc=__test_module__consumer_0_next)
  proc_instantiation __test_module__producer_0_next_inst_1(my_chan1, proc=__test_module__producer_0_next)
  proc_instantiation __test_module__consumer_0_next_inst_1(my_chan1, proc=__test_module__consumer_0_next)
  proc_instantiation __test_module__producer_0_next_inst_2(my_chan2, proc=__test_module__producer_0_next)
  proc_instantiation __test_module__consumer_0_next_inst_2(my_chan2, proc=__test_module__consumer_0_next)
  __state: () = state_read(state_element=__state, id=24)
  tuple.33: () = tuple(id=33)
  __token: token = literal(value=token, id=23)
  literal.25: bits[1] = literal(value=1, id=25)
  my_chan0: bits[32] = send_channel_end(id=26)
  my_chan0__1: bits[32] = recv_channel_end(id=27)
  my_chan1: bits[32] = send_channel_end(id=28)
  my_chan1__1: bits[32] = recv_channel_end(id=29)
  my_chan2: bits[32] = send_channel_end(id=30)
  my_chan2__1: bits[32] = recv_channel_end(id=31)
  tuple.32: () = tuple(id=32)
  next_value.34: () = next_value(param=__state, value=tuple.33, id=34)
}
