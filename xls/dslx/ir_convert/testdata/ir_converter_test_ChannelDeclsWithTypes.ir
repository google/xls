package test_module

file_number 0 "test_module.x"

top proc __test_module__main_0_next<>(__state: (), init={()}) {
  chan u32_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface u32_chan(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface u32_chan(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan u64_chan(bits[64], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface u64_chan(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface u64_chan(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan tuple_chan((bits[16], (bits[64], (bits[64]))), id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface tuple_chan(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface tuple_chan(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan tuple_with_array_chan((bits[8], (bits[64], bits[64][4])), id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface tuple_with_array_chan(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface tuple_with_array_chan(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  __state: () = state_read(state_element=__state, id=2)
  __token: token = literal(value=token, id=1)
  literal.3: bits[1] = literal(value=1, id=3)
  u32_chan: bits[32] = send_channel_end(id=4)
  u32_chan__1: bits[32] = recv_channel_end(id=5)
  u64_chan: bits[64] = send_channel_end(id=6)
  u64_chan__1: bits[64] = recv_channel_end(id=7)
  tuple_chan: (bits[16], (bits[64], (bits[64]))) = send_channel_end(id=8)
  tuple_chan__1: (bits[16], (bits[64], (bits[64]))) = recv_channel_end(id=9)
  tuple_with_array_chan: (bits[8], (bits[64], bits[64][4])) = send_channel_end(id=10)
  tuple_with_array_chan__1: (bits[8], (bits[64], bits[64][4])) = recv_channel_end(id=11)
  tuple.12: () = tuple(id=12)
  next_value.13: () = next_value(param=__state, value=__state, id=13)
}
