package test_module

file_number 0 "test_module.x"

proc __test_module__SubProc_0_next<my_out: bits[32] out, my_in: bits[32] in>(__state: (), init={()}) {
  chan_interface my_out(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  chan_interface my_in(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  literal.7: token = literal(value=token, id=7)
  literal.3: bits[1] = literal(value=1, id=3)
  receive.8: (token, bits[32]) = receive(literal.7, predicate=literal.3, channel=my_in, id=8)
  d: bits[32] = tuple_index(receive.8, index=1, id=11)
  literal.12: bits[32] = literal(value=1, id=12)
  my_out: bits[32] = send_channel_end(id=4)
  my_in: bits[32] = recv_channel_end(id=5)
  tok: token = tuple_index(receive.8, index=0, id=10)
  add.13: bits[32] = add(d, literal.12, id=13)
  __state: () = state_read(state_element=__state, id=2)
  tuple.15: () = tuple(id=15)
  __token: token = literal(value=token, id=1)
  tuple.6: (bits[32], bits[32]) = tuple(my_out, my_in, id=6)
  tuple_index.9: token = tuple_index(receive.8, index=0, id=9)
  tok__1: token = send(tok, add.13, predicate=literal.3, channel=my_out, id=14)
  next_value.16: () = next_value(param=__state, value=tuple.15, id=16)
}

top proc __test_module__Top_0_next<>(__state: (), init={()}) {
  chan chans__0(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface chans__0(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface chans__0(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan chans__1(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface chans__1(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface chans__1(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan chans__2(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface chans__2(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface chans__2(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan chans__3(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
  chan_interface chans__3(direction=send, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface chans__3(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  proc_instantiation __test_module__SubProc_0_next_inst(chans__0, chans__0, proc=__test_module__SubProc_0_next)
  proc_instantiation __test_module__SubProc_0_next_inst_1(chans__1, chans__1, proc=__test_module__SubProc_0_next)
  proc_instantiation __test_module__SubProc_0_next_inst_2(chans__2, chans__2, proc=__test_module__SubProc_0_next)
  proc_instantiation __test_module__SubProc_0_next_inst_3(chans__3, chans__3, proc=__test_module__SubProc_0_next)
  __state: () = state_read(state_element=__state, id=18)
  __token: token = literal(value=token, id=17)
  literal.19: bits[1] = literal(value=1, id=19)
  i: bits[32] = literal(value=0, id=20)
  i__1: bits[32] = literal(value=1, id=21)
  i__2: bits[32] = literal(value=2, id=22)
  i__3: bits[32] = literal(value=3, id=23)
  tuple.24: () = tuple(id=24)
  tuple.25: () = tuple(id=25)
  next_value.26: () = next_value(param=__state, value=__state, id=26)
}
