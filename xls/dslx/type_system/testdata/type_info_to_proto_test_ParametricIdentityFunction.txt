1:3-1:6: NAME_DEF :: `pid` :: (uN[32]) -> uN[32]
1:7-1:8: NAME_DEF :: `N` :: uN[32]
1:10-1:13: TYPE_ANNOTATION :: `u32` :: uN[32]
1:15-1:16: NAME_DEF :: `x` :: uN[N]
1:15-1:25: PARAM :: `x: bits[N]` :: uN[N]
1:18-1:25: TYPE_ANNOTATION :: `bits[N]` :: uN[N]
1:30-1:37: TYPE_ANNOTATION :: `bits[N]` :: uN[N]
2:0-2:39: FUNCTION :: `fn id(x: u32) -> u32 {
  pid<u32:32>(x)
}` :: (uN[32]) -> uN[32]
2:3-2:5: NAME_DEF :: `id` :: (uN[32]) -> uN[32]
2:6-2:7: NAME_DEF :: `x` :: uN[32]
2:6-2:12: PARAM :: `x: u32` :: uN[32]
2:9-2:12: TYPE_ANNOTATION :: `u32` :: uN[32]
2:17-2:20: TYPE_ANNOTATION :: `u32` :: uN[32]
2:21-2:39: BLOCK :: `{
  pid<u32:32>(x)
}` :: uN[32]
2:23-2:26: NAME_REF :: `pid` :: (uN[32]) -> uN[32]
2:26-2:37: INVOCATION :: `pid<u32:32>(x)` :: uN[32]
2:26-2:37: STATEMENT :: `pid<u32:32>(x)` :: uN[32]
2:27-2:30: TYPE_ANNOTATION :: `u32` :: uN[32]
2:31-2:33: NUMBER :: `u32:32` :: uN[32]
2:35-2:36: NAME_REF :: `x` :: uN[32]