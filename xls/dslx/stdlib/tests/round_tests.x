#![feature(type_inference_v2)]

import std;
import round;

#[test]
fn test_wrappers_well_formed() {
    // ensures the "wrappers" are well-formed.
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0001_0;

    // unsigned
    assert_eq(
        (u1:0, u5:0b0001_0), round::round_u(round::RoundingMode::RNE, num_bits_rounded, unrounded));
    assert_eq((u1:0, u2:0b00), round::round_trunc_u<u32:3>(round::RoundingMode::RNE, unrounded));
    assert_eq((u1:0, u2:0b00), round::round_trunc_to_u<u32:2>(round::RoundingMode::RNE, unrounded));

    // sign & magnitude
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round_sm(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    assert_eq(
        (u1:0, u2:0b00),
        round::round_trunc_sm<u32:3>(round::RoundingMode::RNE, round::Sign::Negative, unrounded));
    assert_eq(
        (u1:0, u2:0b00),
        round::round_trunc_to_sm<u32:2>(round::RoundingMode::RNE, round::Sign::Negative, unrounded));

    // signed
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round_s(round::RoundingMode::RNE, num_bits_rounded, unrounded as s5));
    assert_eq(
        (u1:0, s2:0b00), round::round_trunc_s<u32:3>(round::RoundingMode::RNE, unrounded as s5));
    assert_eq(
        (u1:0, s2:0b00), round::round_trunc_to_s<u32:2>(round::RoundingMode::RNE, unrounded as s5));
}

#[test]
fn test_can_round_all_bits_pow2() {
    // We may want to round away all N bits when N is a power of 2. In such a case, clog2(N+1)
    // is needed.
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1000;
    assert_eq(
        (u1:0, u4:0b0000), round::round_u(round::RoundingMode::RNE, num_bits_rounded, unrounded));
}

// ** Test N = 0 doesn't cause a compiler error **
#[test]
fn round_zero_width_unsigned_rne() {
    let (_, rounded) = round::round<false, u32:0>(
        round::RoundingMode::RNE, uN[0]:0, round::Sign::NonNegative, uN[0]:0);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_zero_width_dynamic_rtz() {
    let (overflow, rounded) = round::round<false, u32:0>(
        round::RoundingMode::RTZ, uN[0]:0, round::Sign::NonNegative, uN[0]:0);
    assert_eq(u1:0, overflow);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_u_zero_width_rtz() {
    let (overflow, rounded) = round::round_u<u32:0>(round::RoundingMode::RTZ, uN[0]:0, uN[0]:0);
    assert_eq(u1:0, overflow);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_trunc_s_all_bits_rtz() {
    // Forces round_trunc_s to compute R = N - num_bits_rounded = 0
    let (_, rounded) = round::round_trunc_s<u32:4, u32:4>(round::RoundingMode::RTZ, sN[4]:0);
    assert_eq(sN[0]:0, rounded);
}

#[test]
fn round_trunc_u_all_bits_rtz() {
    // Forces round_trunc_u to compute R = 0.
    let (_, rounded) = round::round_trunc_u<u32:4, u32:4>(round::RoundingMode::RTZ, uN[4]:0);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_trunc_to_u_zero_width_rtz() {
    let (overflow, rounded) =
        round::round_trunc_to_u<u32:0, u32:4>(round::RoundingMode::RTZ, uN[4]:0);
    assert_eq(u1:0, overflow);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_trunc_sm_all_bits_rtz() {
    // Forces round_trunc_sm to compute R = 0.
    let (_, rounded) = round::round_trunc_sm<u32:4, u32:4>(
        round::RoundingMode::RTZ, round::Sign::NonNegative, uN[4]:0);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_s_zero_width_rtz() {
    let (overflow, rounded) = round::round_s<u32:0>(round::RoundingMode::RTZ, uN[0]:0, sN[0]:0);
    assert_eq(u1:0, overflow);
    assert_eq(sN[0]:0, rounded);
}

#[test]
fn round_trunc_to_s_zero_width_rtz() {
    let (overflow, rounded) =
        round::round_trunc_to_s<u32:0, u32:4>(round::RoundingMode::RTZ, sN[4]:0);
    assert_eq(u1:0, overflow);
    assert_eq(sN[0]:0, rounded);
}

#[test]
fn round_sm_zero_width_rtz() {
    let (overflow, rounded) = round::round_sm<u32:0>(
        round::RoundingMode::RTZ, uN[0]:0, round::Sign::NonNegative, uN[0]:0);
    assert_eq(u1:0, overflow);
    assert_eq(uN[0]:0, rounded);
}

#[test]
fn round_trunc_to_sm_zero_width_rtz() {
    let (overflow, rounded) = round::round_trunc_to_sm<u32:0, u32:4>(
        round::RoundingMode::RTZ, round::Sign::NonNegative, uN[4]:0);
    assert_eq(u1:0, overflow);
    assert_eq(uN[0]:0, rounded);
}

// ** Test num_bits_rounded > N **

fn exercise_round_u_more_fractional_bits(num_bits_rounded: uN[3]) {
    let zero = u5:0;
    let half = u5:0b1_0000;
    let all_ones = u5:0b1_1111;

    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RNE, num_bits_rounded, zero));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RNE, num_bits_rounded, half));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RNE, num_bits_rounded, all_ones));

    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RNA, num_bits_rounded, zero));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RNA, num_bits_rounded, half));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RNA, num_bits_rounded, all_ones));

    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTZ, num_bits_rounded, zero));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTZ, num_bits_rounded, half));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTZ, num_bits_rounded, all_ones));

    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTN, num_bits_rounded, zero));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTN, num_bits_rounded, half));
    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTN, num_bits_rounded, all_ones));

    assert_eq((u1:0, u5:0), round::round_u(round::RoundingMode::RTP, num_bits_rounded, zero));
    assert_eq((u1:1, u5:0), round::round_u(round::RoundingMode::RTP, num_bits_rounded, half));
    assert_eq((u1:1, u5:0), round::round_u(round::RoundingMode::RTP, num_bits_rounded, all_ones));
}

fn exercise_round_s_more_fractional_bits(num_bits_rounded: uN[3]) {
    let zero = s5:0;
    let little_positive = s5:8;
    let little_negative = s5:-8;

    assert_eq((u1:0, s5:0), round::round_s(round::RoundingMode::RNE, num_bits_rounded, zero));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RNE, num_bits_rounded, little_positive));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RNE, num_bits_rounded, little_negative));

    assert_eq((u1:0, s5:0), round::round_s(round::RoundingMode::RNA, num_bits_rounded, zero));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RNA, num_bits_rounded, little_positive));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RNA, num_bits_rounded, little_negative));

    assert_eq((u1:0, s5:0), round::round_s(round::RoundingMode::RTZ, num_bits_rounded, zero));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RTZ, num_bits_rounded, little_positive));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RTZ, num_bits_rounded, little_negative));

    assert_eq((u1:0, s5:0), round::round_s(round::RoundingMode::RTN, num_bits_rounded, zero));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RTN, num_bits_rounded, little_positive));
    assert_eq(
        (u1:1, s5:0), round::round_s(round::RoundingMode::RTN, num_bits_rounded, little_negative));

    assert_eq((u1:0, s5:0), round::round_s(round::RoundingMode::RTP, num_bits_rounded, zero));
    assert_eq(
        (u1:1, s5:0), round::round_s(round::RoundingMode::RTP, num_bits_rounded, little_positive));
    assert_eq(
        (u1:0, s5:0), round::round_s(round::RoundingMode::RTP, num_bits_rounded, little_negative));
}

fn exercise_round_sm_more_fractional_bits(num_bits_rounded: uN[3], sign: round::Sign) {
    let zero = u5:0;
    let half = u5:0b1_0000;
    let all_ones = u5:0b1_1111;

    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RNE, num_bits_rounded, sign, zero));
    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RNE, num_bits_rounded, sign, half));
    assert_eq(
        (u1:0, u5:0), round::round_sm(round::RoundingMode::RNE, num_bits_rounded, sign, all_ones));

    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RNA, num_bits_rounded, sign, zero));
    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RNA, num_bits_rounded, sign, half));
    assert_eq(
        (u1:0, u5:0), round::round_sm(round::RoundingMode::RNA, num_bits_rounded, sign, all_ones));

    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RTZ, num_bits_rounded, sign, zero));
    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RTZ, num_bits_rounded, sign, half));
    assert_eq(
        (u1:0, u5:0), round::round_sm(round::RoundingMode::RTZ, num_bits_rounded, sign, all_ones));

    let rtn_expected_overflow = if sign == round::Sign::Negative { u1:1 } else { u1:0 };
    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RTN, num_bits_rounded, sign, zero));
    assert_eq(
        (rtn_expected_overflow, u5:0),
        round::round_sm(round::RoundingMode::RTN, num_bits_rounded, sign, half));
    assert_eq(
        (rtn_expected_overflow, u5:0),
        round::round_sm(round::RoundingMode::RTN, num_bits_rounded, sign, all_ones));

    let rtp_expected_overflow = if sign == round::Sign::NonNegative { u1:1 } else { u1:0 };
    assert_eq((u1:0, u5:0), round::round_sm(round::RoundingMode::RTP, num_bits_rounded, sign, zero));
    assert_eq(
        (rtp_expected_overflow, u5:0),
        round::round_sm(round::RoundingMode::RTP, num_bits_rounded, sign, half));
    assert_eq(
        (rtp_expected_overflow, u5:0),
        round::round_sm(round::RoundingMode::RTP, num_bits_rounded, sign, all_ones));
}

#[test]
fn test_round_more_fractional_bits_unsigned() {
    exercise_round_u_more_fractional_bits(u3:6);
    exercise_round_u_more_fractional_bits(u3:7);
}

#[test]
fn test_round_more_fractional_bits_signed() {
    exercise_round_s_more_fractional_bits(u3:6);
    exercise_round_s_more_fractional_bits(u3:7);
}

#[test]
fn test_round_more_fractional_bits_sign_magnitude() {
    exercise_round_sm_more_fractional_bits(u3:6, round::Sign::NonNegative);
    exercise_round_sm_more_fractional_bits(u3:7, round::Sign::NonNegative);
    exercise_round_sm_more_fractional_bits(u3:6, round::Sign::Negative);
    exercise_round_sm_more_fractional_bits(u3:7, round::Sign::Negative);
}

// Test round exhaustively for widths 1 through 5, all rounding modes, and num bits rounded.

// ---------------------------------------------------------------------------
// These tests are AUTO-GENERATED by gen_round_tests.py - do not edit manually.
// Everything below this comment will be overwritten.
// ---------------------------------------------------------------------------

// --- Width 1 bits --------------------------------------------------------
#[test]
fn test_w1_p00_n0() {
    let num_bits_rounded = u1:0;
    let unrounded = u1:0b0;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
}

#[test]
fn test_w1_p00_n1() {
    let num_bits_rounded = u1:1;
    let unrounded = u1:0b0;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
}

#[test]
fn test_w1_p01_n0() {
    let num_bits_rounded = u1:0;
    let unrounded = u1:0b1;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u1:0b1),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s1:0b1),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s1:0b1),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s1:0b1),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s1:0b1),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s1:0b1),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
}

#[test]
fn test_w1_p01_n1() {
    let num_bits_rounded = u1:1;
    let unrounded = u1:0b1;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u1:0b0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u1:0b0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u1:0b0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u1:0b0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u1:0b0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s1:0b0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s1:0b0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s1:0b0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s1));
}

// --- Width 2 bits --------------------------------------------------------
#[test]
fn test_w2_p00_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u2:0b00;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p00_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u2:0b0_0;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p00_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u2:0b00;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p00_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u2:0b00;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p01_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u2:0b01;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u2:0b01),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s2:0b01),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s2:0b01),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s2:0b01),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s2:0b01),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s2:0b01),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p01_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u2:0b0_1;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u2:0b0_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s2:0b0_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s2:0b0_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p01_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u2:0b01;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p01_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u2:0b01;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p02_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u2:0b10;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u2:0b10),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s2:0b10),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s2:0b10),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s2:0b10),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s2:0b10),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s2:0b10),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p02_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u2:0b1_0;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p02_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u2:0b10;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p02_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u2:0b10;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p03_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u2:0b11;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u2:0b11),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s2:0b11),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s2:0b11),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s2:0b11),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s2:0b11),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s2:0b11),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p03_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u2:0b1_1;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u2:0b0_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u2:0b0_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u2:0b0_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u2:0b0_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u2:0b0_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u2:0b0_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u2:0b1_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s2:0b1_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s2:0b0_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p03_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u2:0b11;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

#[test]
fn test_w2_p03_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u2:0b11;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, u2:0b00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u2:0b00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, s2:0b00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s2:0b00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s2));
}

// --- Width 3 bits --------------------------------------------------------
#[test]
fn test_w3_p00_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p00_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b00_0;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p00_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b0_00;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p00_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p01_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b001;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u3:0b001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s3:0b001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s3:0b001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s3:0b001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s3:0b001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s3:0b001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p01_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b00_1;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b00_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p01_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b0_01;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p01_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b001;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p02_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b010;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u3:0b010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, s3:0b010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(2) = 2
    assert_eq(
        (u1:0, s3:0b010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, s3:0b010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(2) = 2
    assert_eq(
        (u1:0, s3:0b010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(2) = 2
    assert_eq(
        (u1:0, s3:0b010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p02_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b01_0;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p02_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b0_10;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p02_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b010;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p03_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b011;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u3:0b011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, s3:0b011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(3) = 3
    assert_eq(
        (u1:0, s3:0b011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, s3:0b011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(3) = 3
    assert_eq(
        (u1:0, s3:0b011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(3) = 3
    assert_eq(
        (u1:0, s3:0b011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p03_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b01_1;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u3:0b01_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s3:0b00_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, s3:0b01_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s3:0b00_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p03_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b0_11;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u3:0b0_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p03_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b011;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p04_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b100;

    // unsigned, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4) = 4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4) = 4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4) = 4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, u3:0b100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, s3:0b100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, s3:0b100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, s3:0b100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, s3:0b100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, s3:0b100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p04_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b10_0;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p04_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b1_00;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p04_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b100;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p05_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b101;

    // unsigned, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5) = 5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5) = 5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5) = 5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, u3:0b101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, s3:0b101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, s3:0b101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, s3:0b101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, s3:0b101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, s3:0b101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p05_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b10_1;

    // unsigned, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, u3:0b10_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, s3:0b10_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p05_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b1_01;

    // unsigned, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.25) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.25) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p05_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b101;

    // unsigned, Real value is 0.625
    // RNE(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.625
    // RNE(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p06_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b110;

    // unsigned, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6) = 6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6) = 6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6) = 6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, u3:0b110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s3:0b110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s3:0b110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s3:0b110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s3:0b110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s3:0b110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p06_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b11_0;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p06_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b1_10;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p06_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b110;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p07_n0() {
    let num_bits_rounded = u2:0;
    let unrounded = u3:0b111;

    // unsigned, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7) = 7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7) = 7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7) = 7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, u3:0b111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s3:0b111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s3:0b111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s3:0b111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s3:0b111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s3:0b111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p07_n1() {
    let num_bits_rounded = u2:1;
    let unrounded = u3:0b11_1;

    // unsigned, Real value is 3.5
    // RNE(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u3:0b00_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u3:0b00_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.5
    // RNE(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u3:0b00_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u3:0b00_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u3:0b00_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, u3:0b11_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s3:0b11_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s3:0b00_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p07_n2() {
    let num_bits_rounded = u2:2;
    let unrounded = u3:0b1_11;

    // unsigned, Real value is 1.75
    // RNE(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.75
    // RNE(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u3:0b0_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, u3:0b1_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, s3:0b1_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s3:0b0_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

#[test]
fn test_w3_p07_n3() {
    let num_bits_rounded = u2:3;
    let unrounded = u3:0b111;

    // unsigned, Real value is 0.875
    // RNE(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.875
    // RNE(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u3:0b000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, u3:0b000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, s3:0b000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s3:0b000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s3));
}

// --- Width 4 bits --------------------------------------------------------
#[test]
fn test_w4_p00_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p00_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b000_0;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p00_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b00_00;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p00_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p00_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p00_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p01_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0001;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u4:0b0001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s4:0b0001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s4:0b0001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s4:0b0001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s4:0b0001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s4:0b0001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p01_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b000_1;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b000_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p01_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b00_01;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p01_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_001;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p01_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0001;

    // unsigned, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p01_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0001;

    // unsigned, Real value is 0.03125
    // RNE(0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.03125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.03125
    // RNE(-0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.03125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.03125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.03125
    // RNE(0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.03125) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p02_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0010;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u4:0b0010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, s4:0b0010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(2) = 2
    assert_eq(
        (u1:0, s4:0b0010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, s4:0b0010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(2) = 2
    assert_eq(
        (u1:0, s4:0b0010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(2) = 2
    assert_eq(
        (u1:0, s4:0b0010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p02_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b001_0;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p02_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b00_10;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p02_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_010;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p02_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0010;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p02_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0010;

    // unsigned, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p03_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0011;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u4:0b0011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, s4:0b0011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(3) = 3
    assert_eq(
        (u1:0, s4:0b0011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, s4:0b0011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(3) = 3
    assert_eq(
        (u1:0, s4:0b0011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(3) = 3
    assert_eq(
        (u1:0, s4:0b0011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p03_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b001_1;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u4:0b001_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, s4:0b001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p03_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b00_11;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u4:0b00_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p03_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_011;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p03_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0011;

    // unsigned, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p03_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0011;

    // unsigned, Real value is 0.09375
    // RNE(0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.09375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.09375
    // RNE(-0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.09375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.09375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.09375
    // RNE(0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.09375) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p04_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0100;

    // unsigned, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4) = 4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4) = 4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4) = 4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, u4:0b0100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, s4:0b0100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(4) = 4
    assert_eq(
        (u1:0, s4:0b0100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, s4:0b0100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(4) = 4
    assert_eq(
        (u1:0, s4:0b0100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(4) = 4
    assert_eq(
        (u1:0, s4:0b0100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p04_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b010_0;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(2) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(2) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(2) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p04_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b01_00;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p04_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_100;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p04_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0100;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p04_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0100;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p05_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0101;

    // unsigned, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5) = 5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5) = 5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5) = 5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, u4:0b0101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, s4:0b0101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(5) = 5
    assert_eq(
        (u1:0, s4:0b0101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, s4:0b0101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(5) = 5
    assert_eq(
        (u1:0, s4:0b0101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(5) = 5
    assert_eq(
        (u1:0, s4:0b0101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p05_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b010_1;

    // unsigned, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, u4:0b010_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, s4:0b010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p05_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b01_01;

    // unsigned, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.25) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.25) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1.25) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p05_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_101;

    // unsigned, Real value is 0.625
    // RNE(0.625) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.625) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.625) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.625
    // RNE(-0.625) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.625) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.625) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.625
    // RNE(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p05_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0101;

    // unsigned, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.3125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p05_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0101;

    // unsigned, Real value is 0.15625
    // RNE(0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.15625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.15625
    // RNE(-0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.15625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.15625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.15625
    // RNE(0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.15625) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p06_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0110;

    // unsigned, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6) = 6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6) = 6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6) = 6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, u4:0b0110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, s4:0b0110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(6) = 6
    assert_eq(
        (u1:0, s4:0b0110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, s4:0b0110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(6) = 6
    assert_eq(
        (u1:0, s4:0b0110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(6) = 6
    assert_eq(
        (u1:0, s4:0b0110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p06_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b011_0;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(3) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(3) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(3) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p06_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b01_10;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p06_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_110;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p06_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0110;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p06_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0110;

    // unsigned, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p07_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b0111;

    // unsigned, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7) = 7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7) = 7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7) = 7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, u4:0b0111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, s4:0b0111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(7) = 7
    assert_eq(
        (u1:0, s4:0b0111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, s4:0b0111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(7) = 7
    assert_eq(
        (u1:0, s4:0b0111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(7) = 7
    assert_eq(
        (u1:0, s4:0b0111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p07_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b011_1;

    // unsigned, Real value is 3.5
    // RNE(3.5) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.5) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.5) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.5
    // RNE(-3.5) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.5) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.5) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, u4:0b011_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3.5
    // RNE(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, s4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, s4:0b000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, s4:0b011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, s4:0b000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p07_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b01_11;

    // unsigned, Real value is 1.75
    // RNE(1.75) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.75) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.75) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.75
    // RNE(-1.75) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.75) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.75) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, u4:0b01_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.75
    // RNE(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, s4:0b01_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p07_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b0_111;

    // unsigned, Real value is 0.875
    // RNE(0.875) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.875) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.875) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.875
    // RNE(-0.875) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.875) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.875) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, u4:0b0_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.875
    // RNE(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p07_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b0111;

    // unsigned, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.4375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p07_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b0111;

    // unsigned, Real value is 0.21875
    // RNE(0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.21875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.21875
    // RNE(-0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.21875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.21875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.21875
    // RNE(0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(0.21875) = 1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p08_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1000;

    // unsigned, Real value is 8
    // RNE(8) = 8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(8) = 8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(8) = 8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(8) = 8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(8) = 8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -8
    // RNE(-8) = -8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-8) = -8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-8) = -8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-8) = -8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-8) = -8
    assert_eq(
        (u1:0, u4:0b1000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -8
    // RNE(-8) = -8
    assert_eq(
        (u1:0, s4:0b1000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-8) = -8
    assert_eq(
        (u1:0, s4:0b1000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-8) = -8
    assert_eq(
        (u1:0, s4:0b1000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-8) = -8
    assert_eq(
        (u1:0, s4:0b1000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-8) = -8
    assert_eq(
        (u1:0, s4:0b1000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p08_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b100_0;

    // unsigned, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p08_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b10_00;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p08_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_000;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p08_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1000;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p08_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1000;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p09_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1001;

    // unsigned, Real value is 9
    // RNE(9) = 9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(9) = 9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(9) = 9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(9) = 9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(9) = 9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -9
    // RNE(-9) = -9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-9) = -9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-9) = -9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-9) = -9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-9) = -9
    assert_eq(
        (u1:0, u4:0b1001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, s4:0b1001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, s4:0b1001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, s4:0b1001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, s4:0b1001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, s4:0b1001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p09_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b100_1;

    // unsigned, Real value is 4.5
    // RNE(4.5) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4.5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4.5) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4.5) = 4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4.5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4.5
    // RNE(-4.5) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4.5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4.5) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4.5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4.5) = -4
    assert_eq(
        (u1:0, u4:0b100_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3.5
    // RNE(-3.5) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-3.5) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-3.5) = -4
    assert_eq(
        (u1:0, s4:0b100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p09_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b10_01;

    // unsigned, Real value is 2.25
    // RNE(2.25) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.25) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.25) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.25) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.25) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.25
    // RNE(-2.25) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.25) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.25) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.25) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.25) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.75
    // RNE(-1.75) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1.75) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1.75) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p09_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_001;

    // unsigned, Real value is 1.125
    // RNE(1.125) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.125) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.125) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.125) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.125) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.125
    // RNE(-1.125) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.125) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.125) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.125) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.125) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.875
    // RNE(-0.875) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.875) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.875) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p09_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1001;

    // unsigned, Real value is 0.5625
    // RNE(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5625
    // RNE(-0.5625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.4375) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p09_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1001;

    // unsigned, Real value is 0.28125
    // RNE(0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.28125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.28125
    // RNE(-0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.28125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.28125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.21875
    // RNE(-0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.21875) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.21875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p10_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1010;

    // unsigned, Real value is 10
    // RNE(10) = 10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(10) = 10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(10) = 10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(10) = 10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(10) = 10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -10
    // RNE(-10) = -10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-10) = -10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-10) = -10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-10) = -10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-10) = -10
    assert_eq(
        (u1:0, u4:0b1010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, s4:0b1010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, s4:0b1010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, s4:0b1010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, s4:0b1010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, s4:0b1010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p10_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b101_0;

    // unsigned, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p10_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b10_10;

    // unsigned, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p10_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_010;

    // unsigned, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.25) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.25) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p10_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1010;

    // unsigned, Real value is 0.625
    // RNE(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.625
    // RNE(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p10_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1010;

    // unsigned, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.3125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p11_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1011;

    // unsigned, Real value is 11
    // RNE(11) = 11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(11) = 11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(11) = 11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(11) = 11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(11) = 11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -11
    // RNE(-11) = -11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-11) = -11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-11) = -11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-11) = -11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-11) = -11
    assert_eq(
        (u1:0, u4:0b1011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, s4:0b1011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, s4:0b1011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, s4:0b1011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, s4:0b1011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, s4:0b1011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p11_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b101_1;

    // unsigned, Real value is 5.5
    // RNE(5.5) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5.5) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5.5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5.5) = 5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5.5) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5.5
    // RNE(-5.5) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5.5) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5.5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5.5) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5.5) = -5
    assert_eq(
        (u1:0, u4:0b101_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, s4:0b101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p11_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b10_11;

    // unsigned, Real value is 2.75
    // RNE(2.75) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.75) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.75) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.75) = 2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.75) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.75
    // RNE(-2.75) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.75) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.75) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.75) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.75) = -2
    assert_eq(
        (u1:0, u4:0b10_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1.25) = -2
    assert_eq(
        (u1:0, s4:0b10_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p11_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_011;

    // unsigned, Real value is 1.375
    // RNE(1.375) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.375) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.375) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.375) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.375) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.375
    // RNE(-1.375) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.375) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.375) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.375) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.375) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.625
    // RNE(-0.625) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.625) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.625) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p11_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1011;

    // unsigned, Real value is 0.6875
    // RNE(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.6875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.6875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.6875
    // RNE(-0.6875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.6875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.6875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.6875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.6875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.3125) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p11_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1011;

    // unsigned, Real value is 0.34375
    // RNE(0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.34375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.34375
    // RNE(-0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.34375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.34375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.15625
    // RNE(-0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.15625) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.15625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p12_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1100;

    // unsigned, Real value is 12
    // RNE(12) = 12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(12) = 12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(12) = 12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(12) = 12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(12) = 12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -12
    // RNE(-12) = -12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-12) = -12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-12) = -12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-12) = -12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-12) = -12
    assert_eq(
        (u1:0, u4:0b1100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, s4:0b1100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, s4:0b1100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, s4:0b1100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, s4:0b1100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, s4:0b1100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p12_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b110_0;

    // unsigned, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p12_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b11_00;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p12_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_100;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p12_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1100;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p12_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1100;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p13_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1101;

    // unsigned, Real value is 13
    // RNE(13) = 13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(13) = 13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(13) = 13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(13) = 13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(13) = 13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -13
    // RNE(-13) = -13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-13) = -13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-13) = -13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-13) = -13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-13) = -13
    assert_eq(
        (u1:0, u4:0b1101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, s4:0b1101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, s4:0b1101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, s4:0b1101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, s4:0b1101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, s4:0b1101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p13_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b110_1;

    // unsigned, Real value is 6.5
    // RNE(6.5) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6.5) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6.5) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6.5) = 6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6.5) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6.5
    // RNE(-6.5) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6.5) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6.5) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6.5) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6.5) = -6
    assert_eq(
        (u1:0, u4:0b110_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, s4:0b110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p13_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b11_01;

    // unsigned, Real value is 3.25
    // RNE(3.25) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.25) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.25) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.25) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.25) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.25
    // RNE(-3.25) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.25) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.25) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.25) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.25) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p13_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_101;

    // unsigned, Real value is 1.625
    // RNE(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.625) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.625) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.625
    // RNE(-1.625) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.625) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.625) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.625) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.625) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.375) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p13_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1101;

    // unsigned, Real value is 0.8125
    // RNE(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.8125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.8125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.8125
    // RNE(-0.8125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.8125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.8125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.8125) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.8125) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p13_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1101;

    // unsigned, Real value is 0.40625
    // RNE(0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.40625) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.40625
    // RNE(-0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.40625) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.40625) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.09375
    // RNE(-0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.09375) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.09375) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p14_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1110;

    // unsigned, Real value is 14
    // RNE(14) = 14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(14) = 14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(14) = 14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(14) = 14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(14) = 14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -14
    // RNE(-14) = -14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-14) = -14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-14) = -14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-14) = -14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-14) = -14
    assert_eq(
        (u1:0, u4:0b1110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s4:0b1110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s4:0b1110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s4:0b1110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s4:0b1110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s4:0b1110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p14_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b111_0;

    // unsigned, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p14_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b11_10;

    // unsigned, Real value is 3.5
    // RNE(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.5
    // RNE(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p14_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_110;

    // unsigned, Real value is 1.75
    // RNE(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.75
    // RNE(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p14_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1110;

    // unsigned, Real value is 0.875
    // RNE(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.875
    // RNE(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p14_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1110;

    // unsigned, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.4375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p15_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u4:0b1111;

    // unsigned, Real value is 15
    // RNE(15) = 15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(15) = 15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(15) = 15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(15) = 15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(15) = 15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -15
    // RNE(-15) = -15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-15) = -15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-15) = -15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-15) = -15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-15) = -15
    assert_eq(
        (u1:0, u4:0b1111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s4:0b1111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s4:0b1111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s4:0b1111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s4:0b1111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s4:0b1111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p15_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u4:0b111_1;

    // unsigned, Real value is 7.5
    // RNE(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, u4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, u4:0b000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7.5) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7.5) = 7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, u4:0b000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7.5
    // RNE(-7.5) = -8 -> overflow
    assert_eq(
        (u1:1, u4:0b000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7.5) = -8 -> overflow
    assert_eq(
        (u1:1, u4:0b000_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7.5) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7.5) = -8 -> overflow
    assert_eq(
        (u1:1, u4:0b000_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7.5) = -7
    assert_eq(
        (u1:0, u4:0b111_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s4:0b111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s4:0b000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p15_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u4:0b11_11;

    // unsigned, Real value is 3.75
    // RNE(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.75) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.75) = 3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.75
    // RNE(-3.75) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.75) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.75) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.75) = -4 -> overflow
    assert_eq(
        (u1:1, u4:0b00_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.75) = -3
    assert_eq(
        (u1:0, u4:0b11_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, s4:0b11_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s4:0b00_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p15_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u4:0b1_111;

    // unsigned, Real value is 1.875
    // RNE(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.875) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.875) = 1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.875
    // RNE(-1.875) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.875) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.875) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.875) = -2 -> overflow
    assert_eq(
        (u1:1, u4:0b0_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.875) = -1
    assert_eq(
        (u1:0, u4:0b1_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.125) = -1
    assert_eq(
        (u1:0, s4:0b1_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s4:0b0_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p15_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u4:0b1111;

    // unsigned, Real value is 0.9375
    // RNE(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.9375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.9375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.9375
    // RNE(-0.9375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.9375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.9375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.9375) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.9375) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

#[test]
fn test_w4_p15_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u4:0b1111;

    // unsigned, Real value is 0.46875
    // RNE(0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.46875) = 1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.46875
    // RNE(-0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.46875) = -1 -> overflow
    assert_eq(
        (u1:1, u4:0b0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.46875) = 0
    assert_eq(
        (u1:0, u4:0b0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.03125
    // RNE(-0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RNA(-0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTZ(-0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTN(-0.03125) = -1 -> overflow
    assert_eq(
        (u1:1, s4:0b0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
    // RTP(-0.03125) = 0
    assert_eq(
        (u1:0, s4:0b0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s4));
}

// --- Width 5 bits --------------------------------------------------------
#[test]
fn test_w5_p00_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p00_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0000_0;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p00_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b000_00;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p00_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p00_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p00_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p00_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00000;

    // unsigned, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(0) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0
    // RNE(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00001;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u5:0b00001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s5:0b00001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s5:0b00001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s5:0b00001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s5:0b00001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s5:0b00001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0000_1;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b0000_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b000_01;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_001;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.125) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0001;

    // unsigned, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.0625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.0625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00001;

    // unsigned, Real value is 0.03125
    // RNE(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.03125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.03125
    // RNE(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.03125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.03125
    // RNE(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.03125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p01_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00001;

    // unsigned, Real value is 0.015625
    // RNE(0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.015625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.015625
    // RNE(-0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.015625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.015625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.015625
    // RNE(0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.015625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00010;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u5:0b00010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, s5:0b00010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2) = 2
    assert_eq(
        (u1:0, s5:0b00010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, s5:0b00010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2) = 2
    assert_eq(
        (u1:0, s5:0b00010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2) = 2
    assert_eq(
        (u1:0, s5:0b00010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0001_0;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b000_10;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_010;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0010;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00010;

    // unsigned, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p02_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00010;

    // unsigned, Real value is 0.03125
    // RNE(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.03125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.03125
    // RNE(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.03125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.03125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.03125
    // RNE(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.03125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00011;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u5:0b00011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, s5:0b00011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3) = 3
    assert_eq(
        (u1:0, s5:0b00011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, s5:0b00011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3) = 3
    assert_eq(
        (u1:0, s5:0b00011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3) = 3
    assert_eq(
        (u1:0, s5:0b00011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0001_1;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b0001_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, s5:0b0001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b000_11;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b000_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_011;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.375) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0011;

    // unsigned, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.1875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.1875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00011;

    // unsigned, Real value is 0.09375
    // RNE(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.09375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.09375
    // RNE(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.09375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.09375
    // RNE(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.09375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p03_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00011;

    // unsigned, Real value is 0.046875
    // RNE(0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.046875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.046875
    // RNE(-0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.046875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.046875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.046875
    // RNE(0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.046875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00100;

    // unsigned, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4) = 4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4) = 4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4) = 4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, u5:0b00100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, s5:0b00100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(4) = 4
    assert_eq(
        (u1:0, s5:0b00100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, s5:0b00100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(4) = 4
    assert_eq(
        (u1:0, s5:0b00100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(4) = 4
    assert_eq(
        (u1:0, s5:0b00100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0010_0;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b001_00;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_100;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0100;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00100;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p04_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00100;

    // unsigned, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.0625
    // RNE(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.0625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00101;

    // unsigned, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5) = 5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5) = 5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5) = 5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, u5:0b00101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, s5:0b00101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(5) = 5
    assert_eq(
        (u1:0, s5:0b00101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, s5:0b00101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(5) = 5
    assert_eq(
        (u1:0, s5:0b00101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(5) = 5
    assert_eq(
        (u1:0, s5:0b00101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0010_1;

    // unsigned, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b0010_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, s5:0b0010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b001_01;

    // unsigned, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.25) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.25) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.25) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_101;

    // unsigned, Real value is 0.625
    // RNE(0.625) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.625) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.625) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.625
    // RNE(-0.625) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.625) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.625) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.625
    // RNE(0.625) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.625) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.625) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0101;

    // unsigned, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.3125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.3125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00101;

    // unsigned, Real value is 0.15625
    // RNE(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.15625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.15625
    // RNE(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.15625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.15625
    // RNE(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.15625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p05_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00101;

    // unsigned, Real value is 0.078125
    // RNE(0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.078125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.078125
    // RNE(-0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.078125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.078125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.078125
    // RNE(0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.078125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00110;

    // unsigned, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6) = 6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6) = 6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6) = 6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, u5:0b00110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, s5:0b00110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(6) = 6
    assert_eq(
        (u1:0, s5:0b00110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, s5:0b00110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(6) = 6
    assert_eq(
        (u1:0, s5:0b00110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(6) = 6
    assert_eq(
        (u1:0, s5:0b00110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0011_0;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b001_10;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_110;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0110;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00110;

    // unsigned, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p06_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00110;

    // unsigned, Real value is 0.09375
    // RNE(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.09375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.09375
    // RNE(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.09375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.09375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.09375
    // RNE(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.09375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b00111;

    // unsigned, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7) = 7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7) = 7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7) = 7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, u5:0b00111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, s5:0b00111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(7) = 7
    assert_eq(
        (u1:0, s5:0b00111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, s5:0b00111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(7) = 7
    assert_eq(
        (u1:0, s5:0b00111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(7) = 7
    assert_eq(
        (u1:0, s5:0b00111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0011_1;

    // unsigned, Real value is 3.5
    // RNE(3.5) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.5) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.5) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.5
    // RNE(-3.5) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.5) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.5) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, u5:0b0011_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3.5
    // RNE(3.5) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3.5) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, s5:0b0011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3.5) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b001_11;

    // unsigned, Real value is 1.75
    // RNE(1.75) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.75) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.75) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.75
    // RNE(-1.75) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.75) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.75) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, u5:0b001_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.75
    // RNE(1.75) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.75) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, s5:0b001_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.75) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b00_111;

    // unsigned, Real value is 0.875
    // RNE(0.875) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.875) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.875) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.875
    // RNE(-0.875) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.875) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.875) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, u5:0b00_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.875
    // RNE(0.875) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.875) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.875) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_0111;

    // unsigned, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.4375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.4375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b00111;

    // unsigned, Real value is 0.21875
    // RNE(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.21875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.21875
    // RNE(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.21875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.21875
    // RNE(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.21875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p07_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b00111;

    // unsigned, Real value is 0.109375
    // RNE(0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.109375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.109375
    // RNE(-0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.109375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.109375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.109375
    // RNE(0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.109375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01000;

    // unsigned, Real value is 8
    // RNE(8) = 8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(8) = 8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(8) = 8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(8) = 8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(8) = 8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -8
    // RNE(-8) = -8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-8) = -8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-8) = -8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-8) = -8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-8) = -8
    assert_eq(
        (u1:0, u5:0b01000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 8
    // RNE(8) = 8
    assert_eq(
        (u1:0, s5:0b01000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(8) = 8
    assert_eq(
        (u1:0, s5:0b01000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(8) = 8
    assert_eq(
        (u1:0, s5:0b01000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(8) = 8
    assert_eq(
        (u1:0, s5:0b01000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(8) = 8
    assert_eq(
        (u1:0, s5:0b01000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0100_0;

    // unsigned, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(4) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(4) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(4) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b010_00;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_000;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1000;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01000;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p08_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01000;

    // unsigned, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.125
    // RNE(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01001;

    // unsigned, Real value is 9
    // RNE(9) = 9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(9) = 9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(9) = 9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(9) = 9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(9) = 9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -9
    // RNE(-9) = -9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-9) = -9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-9) = -9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-9) = -9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-9) = -9
    assert_eq(
        (u1:0, u5:0b01001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 9
    // RNE(9) = 9
    assert_eq(
        (u1:0, s5:0b01001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(9) = 9
    assert_eq(
        (u1:0, s5:0b01001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(9) = 9
    assert_eq(
        (u1:0, s5:0b01001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(9) = 9
    assert_eq(
        (u1:0, s5:0b01001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(9) = 9
    assert_eq(
        (u1:0, s5:0b01001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0100_1;

    // unsigned, Real value is 4.5
    // RNE(4.5) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4.5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4.5) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4.5) = 4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4.5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4.5
    // RNE(-4.5) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4.5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4.5) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4.5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4.5) = -4
    assert_eq(
        (u1:0, u5:0b0100_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 4.5
    // RNE(4.5) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(4.5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(4.5) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(4.5) = 4
    assert_eq(
        (u1:0, s5:0b0100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(4.5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b010_01;

    // unsigned, Real value is 2.25
    // RNE(2.25) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.25) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.25) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.25) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.25) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.25
    // RNE(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.25) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2.25
    // RNE(2.25) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2.25) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2.25) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2.25) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2.25) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_001;

    // unsigned, Real value is 1.125
    // RNE(1.125) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.125) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.125) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.125) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.125) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.125
    // RNE(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.125) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.125
    // RNE(1.125) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.125) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.125) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.125) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.125) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1001;

    // unsigned, Real value is 0.5625
    // RNE(0.5625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5625
    // RNE(-0.5625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.5625
    // RNE(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.5625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.5625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01001;

    // unsigned, Real value is 0.28125
    // RNE(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.28125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.28125
    // RNE(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.28125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.28125
    // RNE(0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.28125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p09_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01001;

    // unsigned, Real value is 0.140625
    // RNE(0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.140625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.140625
    // RNE(-0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.140625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.140625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.140625
    // RNE(0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.140625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01010;

    // unsigned, Real value is 10
    // RNE(10) = 10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(10) = 10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(10) = 10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(10) = 10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(10) = 10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -10
    // RNE(-10) = -10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-10) = -10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-10) = -10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-10) = -10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-10) = -10
    assert_eq(
        (u1:0, u5:0b01010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 10
    // RNE(10) = 10
    assert_eq(
        (u1:0, s5:0b01010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(10) = 10
    assert_eq(
        (u1:0, s5:0b01010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(10) = 10
    assert_eq(
        (u1:0, s5:0b01010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(10) = 10
    assert_eq(
        (u1:0, s5:0b01010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(10) = 10
    assert_eq(
        (u1:0, s5:0b01010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0101_0;

    // unsigned, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b010_10;

    // unsigned, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_010;

    // unsigned, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.25) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.25) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.25) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1010;

    // unsigned, Real value is 0.625
    // RNE(0.625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.625
    // RNE(-0.625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.625
    // RNE(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01010;

    // unsigned, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.3125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p10_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01010;

    // unsigned, Real value is 0.15625
    // RNE(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.15625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.15625
    // RNE(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.15625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.15625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.15625
    // RNE(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.15625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01011;

    // unsigned, Real value is 11
    // RNE(11) = 11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(11) = 11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(11) = 11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(11) = 11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(11) = 11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -11
    // RNE(-11) = -11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-11) = -11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-11) = -11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-11) = -11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-11) = -11
    assert_eq(
        (u1:0, u5:0b01011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 11
    // RNE(11) = 11
    assert_eq(
        (u1:0, s5:0b01011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(11) = 11
    assert_eq(
        (u1:0, s5:0b01011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(11) = 11
    assert_eq(
        (u1:0, s5:0b01011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(11) = 11
    assert_eq(
        (u1:0, s5:0b01011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(11) = 11
    assert_eq(
        (u1:0, s5:0b01011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0101_1;

    // unsigned, Real value is 5.5
    // RNE(5.5) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5.5) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5.5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5.5) = 5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5.5) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5.5
    // RNE(-5.5) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5.5) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5.5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5.5) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5.5) = -5
    assert_eq(
        (u1:0, u5:0b0101_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 5.5
    // RNE(5.5) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(5.5) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(5.5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(5.5) = 5
    assert_eq(
        (u1:0, s5:0b0101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(5.5) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b010_11;

    // unsigned, Real value is 2.75
    // RNE(2.75) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.75) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.75) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.75) = 2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.75) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.75
    // RNE(-2.75) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.75) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.75) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.75) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.75) = -2
    assert_eq(
        (u1:0, u5:0b010_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 2.75
    // RNE(2.75) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(2.75) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(2.75) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(2.75) = 2
    assert_eq(
        (u1:0, s5:0b010_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(2.75) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_011;

    // unsigned, Real value is 1.375
    // RNE(1.375) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.375) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.375) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.375) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.375) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.375
    // RNE(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.375) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.375
    // RNE(1.375) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.375) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.375) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.375) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.375) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1011;

    // unsigned, Real value is 0.6875
    // RNE(0.6875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.6875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.6875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.6875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.6875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.6875
    // RNE(-0.6875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.6875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.6875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.6875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.6875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.6875
    // RNE(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.6875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.6875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01011;

    // unsigned, Real value is 0.34375
    // RNE(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.34375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.34375
    // RNE(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.34375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.34375
    // RNE(0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.34375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p11_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01011;

    // unsigned, Real value is 0.171875
    // RNE(0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.171875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.171875
    // RNE(-0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.171875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.171875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.171875
    // RNE(0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.171875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01100;

    // unsigned, Real value is 12
    // RNE(12) = 12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(12) = 12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(12) = 12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(12) = 12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(12) = 12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -12
    // RNE(-12) = -12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-12) = -12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-12) = -12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-12) = -12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-12) = -12
    assert_eq(
        (u1:0, u5:0b01100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 12
    // RNE(12) = 12
    assert_eq(
        (u1:0, s5:0b01100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(12) = 12
    assert_eq(
        (u1:0, s5:0b01100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(12) = 12
    assert_eq(
        (u1:0, s5:0b01100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(12) = 12
    assert_eq(
        (u1:0, s5:0b01100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(12) = 12
    assert_eq(
        (u1:0, s5:0b01100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0110_0;

    // unsigned, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(6) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(6) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(6) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b011_00;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_100;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1100;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01100;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p12_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01100;

    // unsigned, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.1875
    // RNE(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.1875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01101;

    // unsigned, Real value is 13
    // RNE(13) = 13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(13) = 13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(13) = 13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(13) = 13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(13) = 13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -13
    // RNE(-13) = -13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-13) = -13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-13) = -13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-13) = -13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-13) = -13
    assert_eq(
        (u1:0, u5:0b01101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 13
    // RNE(13) = 13
    assert_eq(
        (u1:0, s5:0b01101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(13) = 13
    assert_eq(
        (u1:0, s5:0b01101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(13) = 13
    assert_eq(
        (u1:0, s5:0b01101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(13) = 13
    assert_eq(
        (u1:0, s5:0b01101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(13) = 13
    assert_eq(
        (u1:0, s5:0b01101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0110_1;

    // unsigned, Real value is 6.5
    // RNE(6.5) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6.5) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6.5) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6.5) = 6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6.5) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6.5
    // RNE(-6.5) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6.5) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6.5) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6.5) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6.5) = -6
    assert_eq(
        (u1:0, u5:0b0110_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 6.5
    // RNE(6.5) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(6.5) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(6.5) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(6.5) = 6
    assert_eq(
        (u1:0, s5:0b0110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(6.5) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b011_01;

    // unsigned, Real value is 3.25
    // RNE(3.25) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.25) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.25) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.25) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.25) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.25
    // RNE(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.25) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3.25
    // RNE(3.25) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3.25) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3.25) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3.25) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3.25) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_101;

    // unsigned, Real value is 1.625
    // RNE(1.625) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.625) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.625) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.625) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.625) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.625
    // RNE(-1.625) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.625) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.625) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.625) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.625) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.625
    // RNE(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.625) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.625) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1101;

    // unsigned, Real value is 0.8125
    // RNE(0.8125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.8125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.8125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.8125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.8125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.8125
    // RNE(-0.8125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.8125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.8125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.8125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.8125) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.8125
    // RNE(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.8125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.8125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01101;

    // unsigned, Real value is 0.40625
    // RNE(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.40625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.40625
    // RNE(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.40625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.40625
    // RNE(0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.40625) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p13_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01101;

    // unsigned, Real value is 0.203125
    // RNE(0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.203125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.203125
    // RNE(-0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.203125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.203125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.203125
    // RNE(0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.203125) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01110;

    // unsigned, Real value is 14
    // RNE(14) = 14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(14) = 14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(14) = 14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(14) = 14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(14) = 14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -14
    // RNE(-14) = -14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-14) = -14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-14) = -14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-14) = -14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-14) = -14
    assert_eq(
        (u1:0, u5:0b01110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 14
    // RNE(14) = 14
    assert_eq(
        (u1:0, s5:0b01110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(14) = 14
    assert_eq(
        (u1:0, s5:0b01110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(14) = 14
    assert_eq(
        (u1:0, s5:0b01110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(14) = 14
    assert_eq(
        (u1:0, s5:0b01110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(14) = 14
    assert_eq(
        (u1:0, s5:0b01110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0111_0;

    // unsigned, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(7) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(7) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(7) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b011_10;

    // unsigned, Real value is 3.5
    // RNE(3.5) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.5) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.5) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.5
    // RNE(-3.5) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.5) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.5) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3.5
    // RNE(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_110;

    // unsigned, Real value is 1.75
    // RNE(1.75) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.75) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.75) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.75
    // RNE(-1.75) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.75) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.75) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.75
    // RNE(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1110;

    // unsigned, Real value is 0.875
    // RNE(0.875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.875
    // RNE(-0.875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.875
    // RNE(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01110;

    // unsigned, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.4375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p14_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01110;

    // unsigned, Real value is 0.21875
    // RNE(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.21875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.21875
    // RNE(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.21875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.21875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.21875
    // RNE(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.21875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b01111;

    // unsigned, Real value is 15
    // RNE(15) = 15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(15) = 15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(15) = 15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(15) = 15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(15) = 15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -15
    // RNE(-15) = -15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-15) = -15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-15) = -15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-15) = -15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-15) = -15
    assert_eq(
        (u1:0, u5:0b01111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 15
    // RNE(15) = 15
    assert_eq(
        (u1:0, s5:0b01111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(15) = 15
    assert_eq(
        (u1:0, s5:0b01111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(15) = 15
    assert_eq(
        (u1:0, s5:0b01111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(15) = 15
    assert_eq(
        (u1:0, s5:0b01111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(15) = 15
    assert_eq(
        (u1:0, s5:0b01111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b0111_1;

    // unsigned, Real value is 7.5
    // RNE(7.5) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7.5) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7.5) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7.5) = 7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7.5) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7.5
    // RNE(-7.5) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7.5) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7.5) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7.5) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7.5) = -7
    assert_eq(
        (u1:0, u5:0b0111_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 7.5
    // RNE(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, s5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, s5:0b0000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(7.5) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(7.5) = 7
    assert_eq(
        (u1:0, s5:0b0111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b011_11;

    // unsigned, Real value is 3.75
    // RNE(3.75) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.75) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.75) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.75) = 3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.75) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.75
    // RNE(-3.75) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.75) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.75) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.75) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.75) = -3
    assert_eq(
        (u1:0, u5:0b011_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 3.75
    // RNE(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(3.75) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(3.75) = 3
    assert_eq(
        (u1:0, s5:0b011_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b01_111;

    // unsigned, Real value is 1.875
    // RNE(1.875) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.875) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.875) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.875) = 1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.875) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.875
    // RNE(-1.875) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.875) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.875) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.875) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.875) = -1
    assert_eq(
        (u1:0, u5:0b01_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 1.875
    // RNE(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(1.875) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(1.875) = 1
    assert_eq(
        (u1:0, s5:0b01_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b0_1111;

    // unsigned, Real value is 0.9375
    // RNE(0.9375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.9375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.9375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.9375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.9375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.9375
    // RNE(-0.9375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.9375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.9375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.9375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.9375) = 0
    assert_eq(
        (u1:0, u5:0b0_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.9375
    // RNE(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.9375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.9375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b01111;

    // unsigned, Real value is 0.46875
    // RNE(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.46875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.46875
    // RNE(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.46875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.46875
    // RNE(0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.46875) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p15_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b01111;

    // unsigned, Real value is 0.234375
    // RNE(0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.234375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.234375
    // RNE(-0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.234375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.234375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is 0.234375
    // RNE(0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(0.234375) = 1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10000;

    // unsigned, Real value is 16
    // RNE(16) = 16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(16) = 16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(16) = 16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(16) = 16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(16) = 16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -16
    // RNE(-16) = -16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-16) = -16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-16) = -16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-16) = -16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-16) = -16
    assert_eq(
        (u1:0, u5:0b10000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -16
    // RNE(-16) = -16
    assert_eq(
        (u1:0, s5:0b10000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-16) = -16
    assert_eq(
        (u1:0, s5:0b10000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-16) = -16
    assert_eq(
        (u1:0, s5:0b10000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-16) = -16
    assert_eq(
        (u1:0, s5:0b10000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-16) = -16
    assert_eq(
        (u1:0, s5:0b10000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1000_0;

    // unsigned, Real value is 8
    // RNE(8) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(8) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(8) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(8) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(8) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -8
    // RNE(-8) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-8) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-8) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-8) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-8) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -8
    // RNE(-8) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-8) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-8) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-8) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-8) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b100_00;

    // unsigned, Real value is 4
    // RNE(4) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_000;

    // unsigned, Real value is 2
    // RNE(2) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0000;

    // unsigned, Real value is 1
    // RNE(1) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10000;

    // unsigned, Real value is 0.5
    // RNE(0.5) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.5) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p16_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10000;

    // unsigned, Real value is 0.25
    // RNE(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.25) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10001;

    // unsigned, Real value is 17
    // RNE(17) = 17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(17) = 17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(17) = 17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(17) = 17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(17) = 17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -17
    // RNE(-17) = -17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-17) = -17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-17) = -17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-17) = -17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-17) = -17
    assert_eq(
        (u1:0, u5:0b10001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -15
    // RNE(-15) = -15
    assert_eq(
        (u1:0, s5:0b10001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-15) = -15
    assert_eq(
        (u1:0, s5:0b10001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-15) = -15
    assert_eq(
        (u1:0, s5:0b10001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-15) = -15
    assert_eq(
        (u1:0, s5:0b10001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-15) = -15
    assert_eq(
        (u1:0, s5:0b10001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1000_1;

    // unsigned, Real value is 8.5
    // RNE(8.5) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(8.5) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(8.5) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(8.5) = 8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(8.5) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -8.5
    // RNE(-8.5) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-8.5) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-8.5) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-8.5) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-8.5) = -8
    assert_eq(
        (u1:0, u5:0b1000_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -7.5
    // RNE(-7.5) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-7.5) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-7.5) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-7.5) = -8
    assert_eq(
        (u1:0, s5:0b1000_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-7.5) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b100_01;

    // unsigned, Real value is 4.25
    // RNE(4.25) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4.25) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4.25) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4.25) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4.25) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4.25
    // RNE(-4.25) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4.25) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4.25) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4.25) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4.25) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3.75
    // RNE(-3.75) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3.75) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3.75) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3.75) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3.75) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_001;

    // unsigned, Real value is 2.125
    // RNE(2.125) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.125) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.125) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.125) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.125) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.125
    // RNE(-2.125) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.125) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.125) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.125) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.125) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.875
    // RNE(-1.875) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.875) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.875) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.875) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.875) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0001;

    // unsigned, Real value is 1.0625
    // RNE(1.0625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.0625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.0625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.0625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.0625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.0625
    // RNE(-1.0625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.0625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.0625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.0625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.0625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.9375
    // RNE(-0.9375) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.9375) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.9375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.9375) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.9375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10001;

    // unsigned, Real value is 0.53125
    // RNE(0.53125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.53125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.53125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.53125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.53125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.53125
    // RNE(-0.53125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.53125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.53125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.53125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.53125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.46875
    // RNE(-0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.46875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.46875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p17_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10001;

    // unsigned, Real value is 0.265625
    // RNE(0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.265625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.265625
    // RNE(-0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.265625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.265625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.234375
    // RNE(-0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.234375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.234375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10010;

    // unsigned, Real value is 18
    // RNE(18) = 18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(18) = 18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(18) = 18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(18) = 18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(18) = 18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -18
    // RNE(-18) = -18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-18) = -18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-18) = -18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-18) = -18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-18) = -18
    assert_eq(
        (u1:0, u5:0b10010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -14
    // RNE(-14) = -14
    assert_eq(
        (u1:0, s5:0b10010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-14) = -14
    assert_eq(
        (u1:0, s5:0b10010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-14) = -14
    assert_eq(
        (u1:0, s5:0b10010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-14) = -14
    assert_eq(
        (u1:0, s5:0b10010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-14) = -14
    assert_eq(
        (u1:0, s5:0b10010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1001_0;

    // unsigned, Real value is 9
    // RNE(9) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(9) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(9) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(9) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(9) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -9
    // RNE(-9) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-9) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-9) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-9) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-9) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b100_10;

    // unsigned, Real value is 4.5
    // RNE(4.5) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4.5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4.5) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4.5) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4.5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4.5
    // RNE(-4.5) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4.5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4.5) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4.5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4.5) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3.5
    // RNE(-3.5) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3.5) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3.5) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_010;

    // unsigned, Real value is 2.25
    // RNE(2.25) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.25) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.25) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.25) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.25) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.25
    // RNE(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.25) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.25) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.75
    // RNE(-1.75) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.75) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.75) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0010;

    // unsigned, Real value is 1.125
    // RNE(1.125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.125) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.125
    // RNE(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.125) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.875
    // RNE(-0.875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10010;

    // unsigned, Real value is 0.5625
    // RNE(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.5625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.5625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.5625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.5625
    // RNE(-0.5625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.5625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.5625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.5625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.5625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.4375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p18_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10010;

    // unsigned, Real value is 0.28125
    // RNE(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.28125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.28125
    // RNE(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.28125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.28125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.21875
    // RNE(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.21875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10011;

    // unsigned, Real value is 19
    // RNE(19) = 19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(19) = 19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(19) = 19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(19) = 19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(19) = 19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -19
    // RNE(-19) = -19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-19) = -19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-19) = -19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-19) = -19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-19) = -19
    assert_eq(
        (u1:0, u5:0b10011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -13
    // RNE(-13) = -13
    assert_eq(
        (u1:0, s5:0b10011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-13) = -13
    assert_eq(
        (u1:0, s5:0b10011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-13) = -13
    assert_eq(
        (u1:0, s5:0b10011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-13) = -13
    assert_eq(
        (u1:0, s5:0b10011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-13) = -13
    assert_eq(
        (u1:0, s5:0b10011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1001_1;

    // unsigned, Real value is 9.5
    // RNE(9.5) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(9.5) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(9.5) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(9.5) = 9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(9.5) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -9.5
    // RNE(-9.5) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-9.5) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-9.5) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-9.5) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-9.5) = -9
    assert_eq(
        (u1:0, u5:0b1001_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -6.5
    // RNE(-6.5) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-6.5) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-6.5) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-6.5) = -7
    assert_eq(
        (u1:0, s5:0b1001_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-6.5) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b100_11;

    // unsigned, Real value is 4.75
    // RNE(4.75) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(4.75) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(4.75) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(4.75) = 4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(4.75) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -4.75
    // RNE(-4.75) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-4.75) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-4.75) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-4.75) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-4.75) = -4
    assert_eq(
        (u1:0, u5:0b100_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3.25
    // RNE(-3.25) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3.25) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3.25) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3.25) = -4
    assert_eq(
        (u1:0, s5:0b100_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3.25) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_011;

    // unsigned, Real value is 2.375
    // RNE(2.375) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.375) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.375) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.375) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.375) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.375
    // RNE(-2.375) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.375) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.375) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.375) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.375) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.625
    // RNE(-1.625) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.625) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.625) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.625) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.625) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0011;

    // unsigned, Real value is 1.1875
    // RNE(1.1875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.1875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.1875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.1875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.1875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.1875
    // RNE(-1.1875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.1875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.1875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.1875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.1875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.8125
    // RNE(-0.8125) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.8125) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.8125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.8125) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.8125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10011;

    // unsigned, Real value is 0.59375
    // RNE(0.59375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.59375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.59375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.59375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.59375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.59375
    // RNE(-0.59375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.59375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.59375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.59375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.59375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.40625
    // RNE(-0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.40625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.40625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p19_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10011;

    // unsigned, Real value is 0.296875
    // RNE(0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.296875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.296875
    // RNE(-0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.296875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.296875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.203125
    // RNE(-0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.203125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.203125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10100;

    // unsigned, Real value is 20
    // RNE(20) = 20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(20) = 20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(20) = 20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(20) = 20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(20) = 20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -20
    // RNE(-20) = -20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-20) = -20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-20) = -20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-20) = -20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-20) = -20
    assert_eq(
        (u1:0, u5:0b10100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -12
    // RNE(-12) = -12
    assert_eq(
        (u1:0, s5:0b10100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-12) = -12
    assert_eq(
        (u1:0, s5:0b10100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-12) = -12
    assert_eq(
        (u1:0, s5:0b10100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-12) = -12
    assert_eq(
        (u1:0, s5:0b10100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-12) = -12
    assert_eq(
        (u1:0, s5:0b10100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1010_0;

    // unsigned, Real value is 10
    // RNE(10) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(10) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(10) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(10) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(10) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -10
    // RNE(-10) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-10) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-10) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-10) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-10) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b101_00;

    // unsigned, Real value is 5
    // RNE(5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_100;

    // unsigned, Real value is 2.5
    // RNE(2.5) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.5) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.5) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.5) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.5) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0100;

    // unsigned, Real value is 1.25
    // RNE(1.25) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.25) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.25) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.25) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.25) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.25) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10100;

    // unsigned, Real value is 0.625
    // RNE(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.625
    // RNE(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p20_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10100;

    // unsigned, Real value is 0.3125
    // RNE(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.3125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.3125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10101;

    // unsigned, Real value is 21
    // RNE(21) = 21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(21) = 21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(21) = 21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(21) = 21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(21) = 21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -21
    // RNE(-21) = -21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-21) = -21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-21) = -21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-21) = -21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-21) = -21
    assert_eq(
        (u1:0, u5:0b10101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -11
    // RNE(-11) = -11
    assert_eq(
        (u1:0, s5:0b10101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-11) = -11
    assert_eq(
        (u1:0, s5:0b10101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-11) = -11
    assert_eq(
        (u1:0, s5:0b10101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-11) = -11
    assert_eq(
        (u1:0, s5:0b10101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-11) = -11
    assert_eq(
        (u1:0, s5:0b10101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1010_1;

    // unsigned, Real value is 10.5
    // RNE(10.5) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(10.5) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(10.5) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(10.5) = 10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(10.5) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -10.5
    // RNE(-10.5) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-10.5) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-10.5) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-10.5) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-10.5) = -10
    assert_eq(
        (u1:0, u5:0b1010_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -5.5
    // RNE(-5.5) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-5.5) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-5.5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-5.5) = -6
    assert_eq(
        (u1:0, s5:0b1010_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-5.5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b101_01;

    // unsigned, Real value is 5.25
    // RNE(5.25) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5.25) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5.25) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5.25) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5.25) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5.25
    // RNE(-5.25) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5.25) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5.25) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5.25) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5.25) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2.75
    // RNE(-2.75) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2.75) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2.75) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2.75) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2.75) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_101;

    // unsigned, Real value is 2.625
    // RNE(2.625) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.625) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.625) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.625) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.625) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.625
    // RNE(-2.625) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.625) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.625) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.625) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.625) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.375
    // RNE(-1.375) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.375) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.375) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.375) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.375) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0101;

    // unsigned, Real value is 1.3125
    // RNE(1.3125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.3125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.3125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.3125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.3125) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.3125
    // RNE(-1.3125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.3125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.3125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.3125) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.3125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.6875
    // RNE(-0.6875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.6875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.6875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.6875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.6875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10101;

    // unsigned, Real value is 0.65625
    // RNE(0.65625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.65625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.65625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.65625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.65625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.65625
    // RNE(-0.65625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.65625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.65625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.65625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.65625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.34375
    // RNE(-0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.34375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.34375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p21_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10101;

    // unsigned, Real value is 0.328125
    // RNE(0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.328125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.328125
    // RNE(-0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.328125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.328125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.171875
    // RNE(-0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.171875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.171875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10110;

    // unsigned, Real value is 22
    // RNE(22) = 22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(22) = 22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(22) = 22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(22) = 22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(22) = 22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -22
    // RNE(-22) = -22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-22) = -22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-22) = -22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-22) = -22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-22) = -22
    assert_eq(
        (u1:0, u5:0b10110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -10
    // RNE(-10) = -10
    assert_eq(
        (u1:0, s5:0b10110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-10) = -10
    assert_eq(
        (u1:0, s5:0b10110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-10) = -10
    assert_eq(
        (u1:0, s5:0b10110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-10) = -10
    assert_eq(
        (u1:0, s5:0b10110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-10) = -10
    assert_eq(
        (u1:0, s5:0b10110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1011_0;

    // unsigned, Real value is 11
    // RNE(11) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(11) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(11) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(11) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(11) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -11
    // RNE(-11) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-11) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-11) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-11) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-11) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b101_10;

    // unsigned, Real value is 5.5
    // RNE(5.5) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5.5) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5.5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5.5) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5.5) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5.5
    // RNE(-5.5) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5.5) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5.5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5.5) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5.5) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_110;

    // unsigned, Real value is 2.75
    // RNE(2.75) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.75) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.75) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.75) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.75) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.75
    // RNE(-2.75) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.75) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.75) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.75) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.75) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.25) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0110;

    // unsigned, Real value is 1.375
    // RNE(1.375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.375) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.375
    // RNE(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.375) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.625
    // RNE(-0.625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10110;

    // unsigned, Real value is 0.6875
    // RNE(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.6875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.6875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.6875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.6875
    // RNE(-0.6875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.6875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.6875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.6875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.6875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.3125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p22_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10110;

    // unsigned, Real value is 0.34375
    // RNE(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.34375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.34375
    // RNE(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.34375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.34375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.15625
    // RNE(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.15625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b10111;

    // unsigned, Real value is 23
    // RNE(23) = 23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(23) = 23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(23) = 23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(23) = 23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(23) = 23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -23
    // RNE(-23) = -23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-23) = -23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-23) = -23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-23) = -23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-23) = -23
    assert_eq(
        (u1:0, u5:0b10111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -9
    // RNE(-9) = -9
    assert_eq(
        (u1:0, s5:0b10111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-9) = -9
    assert_eq(
        (u1:0, s5:0b10111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-9) = -9
    assert_eq(
        (u1:0, s5:0b10111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-9) = -9
    assert_eq(
        (u1:0, s5:0b10111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-9) = -9
    assert_eq(
        (u1:0, s5:0b10111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1011_1;

    // unsigned, Real value is 11.5
    // RNE(11.5) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(11.5) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(11.5) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(11.5) = 11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(11.5) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -11.5
    // RNE(-11.5) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-11.5) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-11.5) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-11.5) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-11.5) = -11
    assert_eq(
        (u1:0, u5:0b1011_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4.5
    // RNE(-4.5) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-4.5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-4.5) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-4.5) = -5
    assert_eq(
        (u1:0, s5:0b1011_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-4.5) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b101_11;

    // unsigned, Real value is 5.75
    // RNE(5.75) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(5.75) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(5.75) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(5.75) = 5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(5.75) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -5.75
    // RNE(-5.75) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-5.75) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-5.75) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-5.75) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-5.75) = -5
    assert_eq(
        (u1:0, u5:0b101_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2.25
    // RNE(-2.25) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2.25) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2.25) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2.25) = -3
    assert_eq(
        (u1:0, s5:0b101_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2.25) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b10_111;

    // unsigned, Real value is 2.875
    // RNE(2.875) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(2.875) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(2.875) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(2.875) = 2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(2.875) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -2.875
    // RNE(-2.875) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-2.875) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-2.875) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-2.875) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-2.875) = -2
    assert_eq(
        (u1:0, u5:0b10_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.125
    // RNE(-1.125) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.125) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.125) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.125) = -2
    assert_eq(
        (u1:0, s5:0b10_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.125) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_0111;

    // unsigned, Real value is 1.4375
    // RNE(1.4375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.4375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.4375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.4375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.4375) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.4375
    // RNE(-1.4375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.4375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.4375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.4375) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.4375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5625
    // RNE(-0.5625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.5625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.5625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.5625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.5625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b10111;

    // unsigned, Real value is 0.71875
    // RNE(0.71875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.71875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.71875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.71875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.71875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.71875
    // RNE(-0.71875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.71875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.71875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.71875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.71875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.28125
    // RNE(-0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.28125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.28125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p23_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b10111;

    // unsigned, Real value is 0.359375
    // RNE(0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.359375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.359375
    // RNE(-0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.359375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.359375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.140625
    // RNE(-0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.140625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.140625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11000;

    // unsigned, Real value is 24
    // RNE(24) = 24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(24) = 24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(24) = 24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(24) = 24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(24) = 24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -24
    // RNE(-24) = -24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-24) = -24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-24) = -24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-24) = -24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-24) = -24
    assert_eq(
        (u1:0, u5:0b11000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -8
    // RNE(-8) = -8
    assert_eq(
        (u1:0, s5:0b11000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-8) = -8
    assert_eq(
        (u1:0, s5:0b11000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-8) = -8
    assert_eq(
        (u1:0, s5:0b11000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-8) = -8
    assert_eq(
        (u1:0, s5:0b11000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-8) = -8
    assert_eq(
        (u1:0, s5:0b11000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1100_0;

    // unsigned, Real value is 12
    // RNE(12) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(12) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(12) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(12) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(12) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -12
    // RNE(-12) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-12) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-12) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-12) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-12) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b110_00;

    // unsigned, Real value is 6
    // RNE(6) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_000;

    // unsigned, Real value is 3
    // RNE(3) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1000;

    // unsigned, Real value is 1.5
    // RNE(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5
    // RNE(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11000;

    // unsigned, Real value is 0.75
    // RNE(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.75) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.75) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.75) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.75
    // RNE(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.75) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.25) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p24_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11000;

    // unsigned, Real value is 0.375
    // RNE(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11001;

    // unsigned, Real value is 25
    // RNE(25) = 25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(25) = 25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(25) = 25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(25) = 25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(25) = 25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -25
    // RNE(-25) = -25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-25) = -25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-25) = -25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-25) = -25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-25) = -25
    assert_eq(
        (u1:0, u5:0b11001),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, s5:0b11001),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, s5:0b11001),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, s5:0b11001),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, s5:0b11001),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, s5:0b11001),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1100_1;

    // unsigned, Real value is 12.5
    // RNE(12.5) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(12.5) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(12.5) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(12.5) = 12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(12.5) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -12.5
    // RNE(-12.5) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-12.5) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-12.5) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-12.5) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-12.5) = -12
    assert_eq(
        (u1:0, u5:0b1100_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3.5
    // RNE(-3.5) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3.5) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3.5) = -4
    assert_eq(
        (u1:0, s5:0b1100_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b110_01;

    // unsigned, Real value is 6.25
    // RNE(6.25) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6.25) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6.25) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6.25) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6.25) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6.25
    // RNE(-6.25) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6.25) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6.25) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6.25) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6.25) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.75
    // RNE(-1.75) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.75) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.75) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_001;

    // unsigned, Real value is 3.125
    // RNE(3.125) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.125) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.125) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.125) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.125) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.125
    // RNE(-3.125) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.125) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.125) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.125) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.125) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.875
    // RNE(-0.875) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.875) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.875) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1001;

    // unsigned, Real value is 1.5625
    // RNE(1.5625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.5625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.5625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.5625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.5625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.5625
    // RNE(-1.5625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.5625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.5625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.5625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.5625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.4375) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11001;

    // unsigned, Real value is 0.78125
    // RNE(0.78125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.78125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.78125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.78125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.78125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.78125
    // RNE(-0.78125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.78125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.78125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.78125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.78125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.21875
    // RNE(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.21875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.21875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p25_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11001;

    // unsigned, Real value is 0.390625
    // RNE(0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.390625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.390625
    // RNE(-0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.390625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.390625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.109375
    // RNE(-0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.109375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.109375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11010;

    // unsigned, Real value is 26
    // RNE(26) = 26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(26) = 26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(26) = 26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(26) = 26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(26) = 26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -26
    // RNE(-26) = -26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-26) = -26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-26) = -26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-26) = -26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-26) = -26
    assert_eq(
        (u1:0, u5:0b11010),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -6
    // RNE(-6) = -6
    assert_eq(
        (u1:0, s5:0b11010),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-6) = -6
    assert_eq(
        (u1:0, s5:0b11010),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-6) = -6
    assert_eq(
        (u1:0, s5:0b11010),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-6) = -6
    assert_eq(
        (u1:0, s5:0b11010),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-6) = -6
    assert_eq(
        (u1:0, s5:0b11010),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1101_0;

    // unsigned, Real value is 13
    // RNE(13) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(13) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(13) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(13) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(13) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -13
    // RNE(-13) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-13) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-13) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-13) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-13) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b110_10;

    // unsigned, Real value is 6.5
    // RNE(6.5) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6.5) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6.5) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6.5) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6.5) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6.5
    // RNE(-6.5) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6.5) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6.5) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6.5) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6.5) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_010;

    // unsigned, Real value is 3.25
    // RNE(3.25) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.25) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.25) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.25) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.25) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.25
    // RNE(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.25) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.25) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1010;

    // unsigned, Real value is 1.625
    // RNE(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.625) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.625) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.625
    // RNE(-1.625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.625) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.625) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.375) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11010;

    // unsigned, Real value is 0.8125
    // RNE(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.8125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.8125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.8125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.8125
    // RNE(-0.8125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.8125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.8125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.8125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.8125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.1875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p26_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11010;

    // unsigned, Real value is 0.40625
    // RNE(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.40625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.40625
    // RNE(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.40625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.40625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.09375
    // RNE(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.09375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11011;

    // unsigned, Real value is 27
    // RNE(27) = 27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(27) = 27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(27) = 27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(27) = 27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(27) = 27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -27
    // RNE(-27) = -27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-27) = -27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-27) = -27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-27) = -27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-27) = -27
    assert_eq(
        (u1:0, u5:0b11011),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -5
    // RNE(-5) = -5
    assert_eq(
        (u1:0, s5:0b11011),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-5) = -5
    assert_eq(
        (u1:0, s5:0b11011),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-5) = -5
    assert_eq(
        (u1:0, s5:0b11011),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-5) = -5
    assert_eq(
        (u1:0, s5:0b11011),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-5) = -5
    assert_eq(
        (u1:0, s5:0b11011),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1101_1;

    // unsigned, Real value is 13.5
    // RNE(13.5) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(13.5) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(13.5) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(13.5) = 13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(13.5) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -13.5
    // RNE(-13.5) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-13.5) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-13.5) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-13.5) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-13.5) = -13
    assert_eq(
        (u1:0, u5:0b1101_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2.5
    // RNE(-2.5) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2.5) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2.5) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2.5) = -3
    assert_eq(
        (u1:0, s5:0b1101_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2.5) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b110_11;

    // unsigned, Real value is 6.75
    // RNE(6.75) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(6.75) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(6.75) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(6.75) = 6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(6.75) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -6.75
    // RNE(-6.75) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-6.75) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-6.75) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-6.75) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-6.75) = -6
    assert_eq(
        (u1:0, u5:0b110_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.25
    // RNE(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.25) = -2
    assert_eq(
        (u1:0, s5:0b110_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.25) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_011;

    // unsigned, Real value is 3.375
    // RNE(3.375) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.375) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.375) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.375) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.375) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.375
    // RNE(-3.375) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.375) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.375) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.375) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.375) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.625
    // RNE(-0.625) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.625) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.625) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.625) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.625) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1011;

    // unsigned, Real value is 1.6875
    // RNE(1.6875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.6875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.6875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.6875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.6875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.6875
    // RNE(-1.6875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.6875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.6875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.6875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.6875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.3125
    // RNE(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.3125) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.3125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11011;

    // unsigned, Real value is 0.84375
    // RNE(0.84375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.84375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.84375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.84375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.84375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.84375
    // RNE(-0.84375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.84375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.84375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.84375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.84375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.15625
    // RNE(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.15625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.15625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p27_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11011;

    // unsigned, Real value is 0.421875
    // RNE(0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.421875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.421875
    // RNE(-0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.421875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.421875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.078125
    // RNE(-0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.078125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.078125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11100;

    // unsigned, Real value is 28
    // RNE(28) = 28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(28) = 28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(28) = 28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(28) = 28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(28) = 28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -28
    // RNE(-28) = -28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-28) = -28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-28) = -28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-28) = -28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-28) = -28
    assert_eq(
        (u1:0, u5:0b11100),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -4
    // RNE(-4) = -4
    assert_eq(
        (u1:0, s5:0b11100),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-4) = -4
    assert_eq(
        (u1:0, s5:0b11100),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-4) = -4
    assert_eq(
        (u1:0, s5:0b11100),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-4) = -4
    assert_eq(
        (u1:0, s5:0b11100),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-4) = -4
    assert_eq(
        (u1:0, s5:0b11100),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1110_0;

    // unsigned, Real value is 14
    // RNE(14) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(14) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(14) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(14) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(14) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -14
    // RNE(-14) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-14) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-14) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-14) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-14) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b111_00;

    // unsigned, Real value is 7
    // RNE(7) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7
    // RNE(-7) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_100;

    // unsigned, Real value is 3.5
    // RNE(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.5) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.5) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.5) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.5
    // RNE(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.5) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.5) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.5) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1100;

    // unsigned, Real value is 1.75
    // RNE(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.75) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.75) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.75) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.75
    // RNE(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.75) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.75) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.75) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11100;

    // unsigned, Real value is 0.875
    // RNE(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.875
    // RNE(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p28_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11100;

    // unsigned, Real value is 0.4375
    // RNE(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.4375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.4375
    // RNE(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.4375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.4375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11101;

    // unsigned, Real value is 29
    // RNE(29) = 29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(29) = 29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(29) = 29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(29) = 29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(29) = 29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -29
    // RNE(-29) = -29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-29) = -29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-29) = -29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-29) = -29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-29) = -29
    assert_eq(
        (u1:0, u5:0b11101),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -3
    // RNE(-3) = -3
    assert_eq(
        (u1:0, s5:0b11101),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-3) = -3
    assert_eq(
        (u1:0, s5:0b11101),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-3) = -3
    assert_eq(
        (u1:0, s5:0b11101),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-3) = -3
    assert_eq(
        (u1:0, s5:0b11101),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-3) = -3
    assert_eq(
        (u1:0, s5:0b11101),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1110_1;

    // unsigned, Real value is 14.5
    // RNE(14.5) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(14.5) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(14.5) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(14.5) = 14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(14.5) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -14.5
    // RNE(-14.5) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-14.5) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-14.5) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-14.5) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-14.5) = -14
    assert_eq(
        (u1:0, u5:0b1110_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1.5
    // RNE(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1.5) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1.5) = -2
    assert_eq(
        (u1:0, s5:0b1110_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1.5) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b111_01;

    // unsigned, Real value is 7.25
    // RNE(7.25) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7.25) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7.25) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7.25) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7.25) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7.25
    // RNE(-7.25) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7.25) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7.25) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7.25) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7.25) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.75
    // RNE(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.75) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.75) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.75) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_101;

    // unsigned, Real value is 3.625
    // RNE(3.625) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.625) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.625) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.625) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.625) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.625
    // RNE(-3.625) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.625) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.625) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.625) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.625) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.375
    // RNE(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.375) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.375) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1101;

    // unsigned, Real value is 1.8125
    // RNE(1.8125) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.8125) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.8125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.8125) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.8125) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.8125
    // RNE(-1.8125) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.8125) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.8125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.8125) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.8125) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.1875
    // RNE(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.1875) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.1875) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11101;

    // unsigned, Real value is 0.90625
    // RNE(0.90625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.90625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.90625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.90625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.90625) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.90625
    // RNE(-0.90625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.90625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.90625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.90625) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.90625) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.09375
    // RNE(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.09375) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.09375) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p29_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11101;

    // unsigned, Real value is 0.453125
    // RNE(0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.453125) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.453125
    // RNE(-0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.453125) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.453125) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.046875
    // RNE(-0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.046875) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.046875) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11110;

    // unsigned, Real value is 30
    // RNE(30) = 30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(30) = 30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(30) = 30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(30) = 30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(30) = 30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -30
    // RNE(-30) = -30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-30) = -30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-30) = -30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-30) = -30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-30) = -30
    assert_eq(
        (u1:0, u5:0b11110),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -2
    // RNE(-2) = -2
    assert_eq(
        (u1:0, s5:0b11110),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-2) = -2
    assert_eq(
        (u1:0, s5:0b11110),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-2) = -2
    assert_eq(
        (u1:0, s5:0b11110),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-2) = -2
    assert_eq(
        (u1:0, s5:0b11110),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-2) = -2
    assert_eq(
        (u1:0, s5:0b11110),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1111_0;

    // unsigned, Real value is 15
    // RNE(15) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(15) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(15) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(15) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(15) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -15
    // RNE(-15) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-15) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-15) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-15) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-15) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b111_10;

    // unsigned, Real value is 7.5
    // RNE(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7.5) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7.5) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7.5) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7.5
    // RNE(-7.5) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7.5) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7.5) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7.5) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7.5) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_110;

    // unsigned, Real value is 3.75
    // RNE(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.75) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.75) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.75) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.75
    // RNE(-3.75) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.75) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.75) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.75) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.75) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1110;

    // unsigned, Real value is 1.875
    // RNE(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.875) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.875) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.875
    // RNE(-1.875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.875) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.875) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.125) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11110;

    // unsigned, Real value is 0.9375
    // RNE(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.9375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.9375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.9375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.9375
    // RNE(-0.9375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.9375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.9375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.9375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.9375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.0625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p30_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11110;

    // unsigned, Real value is 0.46875
    // RNE(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.46875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.46875
    // RNE(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.46875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.46875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.03125
    // RNE(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.03125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n0() {
    let num_bits_rounded = u3:0;
    let unrounded = u5:0b11111;

    // unsigned, Real value is 31
    // RNE(31) = 31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(31) = 31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(31) = 31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(31) = 31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(31) = 31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -31
    // RNE(-31) = -31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-31) = -31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-31) = -31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-31) = -31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-31) = -31
    assert_eq(
        (u1:0, u5:0b11111),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -1
    // RNE(-1) = -1
    assert_eq(
        (u1:0, s5:0b11111),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-1) = -1
    assert_eq(
        (u1:0, s5:0b11111),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-1) = -1
    assert_eq(
        (u1:0, s5:0b11111),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-1) = -1
    assert_eq(
        (u1:0, s5:0b11111),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-1) = -1
    assert_eq(
        (u1:0, s5:0b11111),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n1() {
    let num_bits_rounded = u3:1;
    let unrounded = u5:0b1111_1;

    // unsigned, Real value is 15.5
    // RNE(15.5) = 16 -> overflow
    assert_eq(
        (u1:1, u5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(15.5) = 16 -> overflow
    assert_eq(
        (u1:1, u5:0b0000_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(15.5) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(15.5) = 15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(15.5) = 16 -> overflow
    assert_eq(
        (u1:1, u5:0b0000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -15.5
    // RNE(-15.5) = -16 -> overflow
    assert_eq(
        (u1:1, u5:0b0000_0),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-15.5) = -16 -> overflow
    assert_eq(
        (u1:1, u5:0b0000_0),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-15.5) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-15.5) = -16 -> overflow
    assert_eq(
        (u1:1, u5:0b0000_0),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-15.5) = -15
    assert_eq(
        (u1:0, u5:0b1111_0),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.5
    // RNE(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.5) = -1
    assert_eq(
        (u1:0, s5:0b1111_0),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.5) = 0
    assert_eq(
        (u1:0, s5:0b0000_0),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n2() {
    let num_bits_rounded = u3:2;
    let unrounded = u5:0b111_11;

    // unsigned, Real value is 7.75
    // RNE(7.75) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(7.75) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(7.75) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(7.75) = 7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(7.75) = 8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -7.75
    // RNE(-7.75) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-7.75) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-7.75) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-7.75) = -8 -> overflow
    assert_eq(
        (u1:1, u5:0b000_00),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-7.75) = -7
    assert_eq(
        (u1:0, u5:0b111_00),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.25
    // RNE(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.25) = -1
    assert_eq(
        (u1:0, s5:0b111_00),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.25) = 0
    assert_eq(
        (u1:0, s5:0b000_00),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n3() {
    let num_bits_rounded = u3:3;
    let unrounded = u5:0b11_111;

    // unsigned, Real value is 3.875
    // RNE(3.875) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(3.875) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(3.875) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(3.875) = 3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(3.875) = 4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -3.875
    // RNE(-3.875) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-3.875) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-3.875) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-3.875) = -4 -> overflow
    assert_eq(
        (u1:1, u5:0b00_000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-3.875) = -3
    assert_eq(
        (u1:0, u5:0b11_000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.125
    // RNE(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.125) = -1
    assert_eq(
        (u1:0, s5:0b11_000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.125) = 0
    assert_eq(
        (u1:0, s5:0b00_000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n4() {
    let num_bits_rounded = u3:4;
    let unrounded = u5:0b1_1111;

    // unsigned, Real value is 1.9375
    // RNE(1.9375) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(1.9375) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(1.9375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(1.9375) = 1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(1.9375) = 2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -1.9375
    // RNE(-1.9375) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-1.9375) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-1.9375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-1.9375) = -2 -> overflow
    assert_eq(
        (u1:1, u5:0b0_0000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-1.9375) = -1
    assert_eq(
        (u1:0, u5:0b1_0000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.0625
    // RNE(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.0625) = -1
    assert_eq(
        (u1:0, s5:0b1_0000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.0625) = 0
    assert_eq(
        (u1:0, s5:0b0_0000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n5() {
    let num_bits_rounded = u3:5;
    let unrounded = u5:0b11111;

    // unsigned, Real value is 0.96875
    // RNE(0.96875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.96875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.96875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.96875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.96875) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.96875
    // RNE(-0.96875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.96875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.96875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.96875) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.96875) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.03125
    // RNE(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.03125) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.03125) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}

#[test]
fn test_w5_p31_n6() {
    let num_bits_rounded = u3:6;
    let unrounded = u5:0b11111;

    // unsigned, Real value is 0.484375
    // RNE(0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RNA(0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTZ(0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTN(0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded));
    // RTP(0.484375) = 1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded));

    // sign & magnitude, Real value is -0.484375
    // RNE(-0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNE, num_bits_rounded, round::Sign::Negative, unrounded));
    // RNA(-0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RNA, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTZ(-0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTZ, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTN(-0.484375) = -1 -> overflow
    assert_eq(
        (u1:1, u5:0b00000),
        round::round(round::RoundingMode::RTN, num_bits_rounded, round::Sign::Negative, unrounded));
    // RTP(-0.484375) = 0
    assert_eq(
        (u1:0, u5:0b00000),
        round::round(round::RoundingMode::RTP, num_bits_rounded, round::Sign::Negative, unrounded));

    // signed, Real value is -0.015625
    // RNE(-0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNE, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RNA(-0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RNA, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTZ(-0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTZ, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTN(-0.015625) = -1 -> overflow
    assert_eq(
        (u1:1, s5:0b00000),
        round::round(
            round::RoundingMode::RTN, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
    // RTP(-0.015625) = 0
    assert_eq(
        (u1:0, s5:0b00000),
        round::round(
            round::RoundingMode::RTP, num_bits_rounded, round::Sign::NonNegative, unrounded as s5));
}
