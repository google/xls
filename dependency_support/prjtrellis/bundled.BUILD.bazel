# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# BUILD file for Project Trellis.

package(
    features = [
        "-use_header_modules",  # For exceptions.
    ],
)

licenses(["notice"])

exports_files(["LICENSE"])

genrule(
    name = "version_cpp",
    srcs = ["libtrellis/tools/version.cpp.in"],
    outs = ["libtrellis/generated/version.cpp"],
    cmd = "cat $(SRCS) | sed 's/@CURRENT_GIT_VERSION@/UNSPECIFIED_VERSION/g' > $@",
)

genrule(
    name = "databasepath_hpp",
    srcs = ["@com_google_xls//dependency_support/prjtrellis:bazel_database_path.h"],
    outs = ["libtrellis/generated/BazelDatabasePath.hpp"],
    cmd = "cp $(SRCS) $@",
)

DEPS = [
    # :version needs to be before boost, otherwise prjtrellis code will include
    # a Boost version.hpp instead of its own.
    ":version",
    "@bazel_tools//tools/cpp/runfiles",
    "@boost//:filesystem",
    "@boost//:program_options",
    "@boost//:python",
    "@boost//:system",
    "@boost//:thread",
    "@com_google_absl//absl/strings",
    "@local_config_python//:python_headers",
]

COPTS = [
    "-fexceptions",
    "-Wno-implicit-fallthrough",
]

INCLUDES = [
    "libtrellis/generated",
    "libtrellis/include",
]

cc_library(
    name = "version",
    hdrs = ["libtrellis/tools/version.hpp"],
    includes = ["libtrellis/tools"],
)

HDRS = glob(
    [
        "libtrellis/include/*.h",
        "libtrellis/include/*.hpp",
    ],
    exclude = ["libtrellis/include/DatabasePath.hpp"],
) + [
    "libtrellis/generated/BazelDatabasePath.hpp",
]

py_library(
    name = "prjtrellis",
    srcs = glob([
        "util/common/*.py",
        "timing/util/*.py",
    ]),
    visibility = ["//visibility:public"],
    imports = [
        "timing/util",
        "util/common",
    ],
    data = [":pytrellis.so"],
)

cc_binary(
    name = "pytrellis.so",
    copts = COPTS + ["-fvisibility=hidden"],
    features = ["-parse_headers"],
    linkopts = ["-Wl,-Bsymbolic"],
    linkshared = 1,
    deps = DEPS,
    srcs = HDRS + glob([
        "libtrellis/src/*.cpp",
    ]) + [
        "libtrellis/generated/version.cpp",
    ],
    data = ["@prjtrellis_db//:files"],
    defines = [
        "INCLUDE_PYTHON=1",
    ],
    includes = INCLUDES,
    visibility = ["//visibility:public"],
)

TOOLS = [
    "ecpbram",
    "ecppack",
    "ecpunpack",
    "ecppll",
    "ecpmulti",
]

cc_library(
    name = "libtrellis_for_tools",
    srcs = glob([
        "libtrellis/src/*.cpp",
    ]) + [
        "libtrellis/generated/version.cpp",
    ],
    hdrs = HDRS,
    copts = COPTS,
    data = ["@prjtrellis_db//:files"],
    includes = INCLUDES,
    deps = DEPS,
)

[genrule(
    name = "%s_swapped_databasepath_cpp" % tool,
    srcs = ["libtrellis/tools/%s.cpp" % tool],
    outs = ["libtrellis/generated/%s_swapped_databasepath.cpp" % tool],
    cmd = "cat $(SRCS) | sed 's/\"DatabasePath.hpp\"/\"BazelDatabasePath.hpp\"/g' > $@",
) for tool in TOOLS]

[cc_binary(
    name = tool,
    srcs = HDRS + [
        "libtrellis/generated/%s_swapped_databasepath.cpp" % tool,
        "libtrellis/generated/version.cpp",
    ],
    copts = COPTS,
    linkopts = [
        "-ldl",
    ],
    visibility = ["//visibility:public"],
    deps = DEPS + [
        ":libtrellis_for_tools",
    ],
) for tool in TOOLS]
